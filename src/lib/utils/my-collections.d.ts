/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/schema/snapshot": {
    /**
     * Retrieve Schema Snapshot
     * @description Retrieve the current schema. This endpoint is only available to admin users.
     */
    get: operations["schemaSnapshot"];
  };
  "/schema/apply": {
    /**
     * Apply Schema Difference
     * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
     */
    post: operations["schemaApply"];
  };
  "/schema/diff": {
    /**
     * Retrieve Schema Difference
     * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
     */
    post: operations["schemaDiff"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /**
     * Sort Items
     * @description Re-sort items in collection based on start and to value of item
     */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /**
     * Import Items
     * @description Import multiple records from a JSON or CSV file into a collection.
     */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /**
     * Export Items
     * @description Export a larger data set to a file in the File Library
     */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /**
     * Clear Cache
     * @description Resets both the data and schema cache of Directus.
     */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /**
     * Get a Random String
     * @description Returns a random string of given length.
     */
    get: operations["random"];
  };
  "/fields": {
    /**
     * List All Fields
     * @description Returns a list of the fields available in the project.
     */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /**
     * List Fields in Collection
     * @description Returns a list of the fields available in the given collection.
     */
    get: operations["getCollectionFields"];
    /**
     * Create Field in Collection
     * @description Create a new field in a given collection.
     */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /**
     * Retrieve a Field
     * @description Retrieves the details of a single field in a given collection.
     */
    get: operations["getCollectionField"];
    /**
     * Delete a Field
     * @description Delete an existing field.
     */
    delete: operations["deleteField"];
    /**
     * Update a Field
     * @description Update an existing field.
     */
    patch: operations["updateField"];
  };
  "/collections": {
    /**
     * List Collections
     * @description Returns a list of the collections available in the project.
     */
    get: operations["getCollections"];
    /**
     * Create a Collection
     * @description Create a new collection in Directus.
     */
    post: operations["createCollection"];
  };
  "/collections/{id}": {
    /**
     * Retrieve a Collection
     * @description Retrieves the details of a single collection.
     */
    get: operations["getCollection"];
    /**
     * Delete a Collection
     * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
     */
    delete: operations["deleteCollection"];
    /**
     * Update a Collection
     * @description Update an existing collection.
     */
    patch: operations["updateCollection"];
  };
  "/activity": {
    /**
     * List Activity Actions
     * @description Returns a list of activity actions.
     */
    get: operations["getActivities"];
  };
  "/activity/comment": {
    /**
     * Create a Comment
     * @description Creates a new comment.
     */
    post: operations["createComment"];
  };
  "/activity/{id}": {
    /**
     * Retrieve an Activity Action
     * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
     */
    get: operations["getActivity"];
  };
  "/activity/comment/{id}": {
    /**
     * Delete a Comment
     * @description Delete an existing comment. Deleted comments can not be retrieved.
     */
    delete: operations["deleteComment"];
    /**
     * Update a Comment
     * @description Update the content of an existing comment.
     */
    patch: operations["updateComment"];
  };
  "/folders": {
    /**
     * List Folders
     * @description List the folders.
     */
    get: operations["getFolders"];
    /**
     * Create a Folder
     * @description Create a new folder.
     */
    post: operations["createFolder"];
    /**
     * Delete Multiple Folders
     * @description Delete multiple existing folders.
     */
    delete: operations["deleteFolders"];
    /**
     * Update Multiple Folders
     * @description Update multiple folders at the same time.
     */
    patch: operations["updateFolders"];
  };
  "/folders/{id}": {
    /**
     * Retrieve a Folder
     * @description Retrieve a single folder by unique identifier.
     */
    get: operations["getFolder"];
    /**
     * Delete a Folder
     * @description Delete an existing folder
     */
    delete: operations["deleteFolder"];
    /**
     * Update a Folder
     * @description Update an existing folder
     */
    patch: operations["updateFolder"];
  };
  "/presets": {
    /**
     * List Presets
     * @description List the presets.
     */
    get: operations["getPresets"];
    /**
     * Create a Preset
     * @description Create a new preset.
     */
    post: operations["createPreset"];
    /**
     * Delete Multiple Presets
     * @description Delete multiple existing presets.
     */
    delete: operations["deletePresets"];
    /**
     * Update Multiple Presets
     * @description Update multiple presets at the same time.
     */
    patch: operations["updatePresets"];
  };
  "/presets/{id}": {
    /**
     * Retrieve a Preset
     * @description Retrieve a single preset by unique identifier.
     */
    get: operations["getPreset"];
    /**
     * Delete a Preset
     * @description Delete an existing preset.
     */
    delete: operations["deletePreset"];
    /**
     * Update a Preset
     * @description Update an existing preset.
     */
    patch: operations["updatePreset"];
  };
  "/users": {
    /**
     * List Users
     * @description List the users.
     */
    get: operations["getUsers"];
    /**
     * Create a User
     * @description Create a new user.
     */
    post: operations["createUser"];
    /**
     * Delete Multiple Users
     * @description Delete multiple existing users.
     */
    delete: operations["deleteUsers"];
    /**
     * Update Multiple Users
     * @description Update multiple users at the same time.
     */
    patch: operations["updateUsers"];
  };
  "/users/{id}": {
    /**
     * Retrieve a User
     * @description Retrieve a single user by unique identifier.
     */
    get: operations["getUser"];
    /**
     * Delete a User
     * @description Delete an existing user
     */
    delete: operations["deleteUser"];
    /**
     * Update a User
     * @description Update an existing user
     */
    patch: operations["updateUser"];
  };
  "/users/invite": {
    /**
     * Invite User(s)
     * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     */
    post: operations["invite"];
  };
  "/users/invite/accept": {
    /**
     * Accept User Invite
     * @description Accepts and enables an invited user using a JWT invitation token.
     */
    post: operations["acceptInvite"];
  };
  "/users/me": {
    /**
     * Retrieve Current User
     * @description Retrieve the currently authenticated user.
     */
    get: operations["getMe"];
    /**
     * Update Current User
     * @description Update the currently authenticated user.
     */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /**
     * Update Last Page
     * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {
    /**
     * Enable 2FA
     * @description Enables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaEnable"];
  };
  "/users/me/tfa/disable": {
    /**
     * Disable 2FA
     * @description Disables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaDisable"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
    /**
     * Create a File
     * @description Create a new file
     */
    post: operations["createFile"];
    /**
     * Delete Multiple Files
     * @description Delete multiple existing files.
     */
    delete: operations["deleteFiles"];
    /**
     * Update Multiple Files
     * @description Update multiple files at the same time.
     */
    patch: operations["updateFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
    /**
     * Delete a File
     * @description Delete an existing file.
     */
    delete: operations["deleteFile"];
    /**
     * Update a File
     * @description Update an existing file, and/or replace it's file contents.
     */
    patch: operations["updateFile"];
  };
  "/roles": {
    /**
     * List Roles
     * @description List the roles.
     */
    get: operations["getRoles"];
    /**
     * Create a Role
     * @description Create a new role.
     */
    post: operations["createRole"];
    /**
     * Delete Multiple Roles
     * @description Delete multiple existing roles.
     */
    delete: operations["deleteRoles"];
    /**
     * Update Multiple Roles
     * @description Update multiple roles at the same time.
     */
    patch: operations["updateRoles"];
  };
  "/roles/{id}": {
    /**
     * Retrieve a Role
     * @description Retrieve a single role by unique identifier.
     */
    get: operations["getRole"];
    /**
     * Delete a Role
     * @description Delete an existing role
     */
    delete: operations["deleteRole"];
    /**
     * Update a Role
     * @description Update an existing role
     */
    patch: operations["updateRole"];
  };
  "/permissions": {
    /**
     * List Permissions
     * @description List all permissions.
     */
    get: operations["getPermissions"];
    /**
     * Create a Permission
     * @description Create a new permission.
     */
    post: operations["createPermission"];
    /**
     * Delete Multiple Permissions
     * @description Delete multiple existing permissions.
     */
    delete: operations["deletePermissions"];
    /**
     * Update Multiple Permissions
     * @description Update multiple permissions at the same time.
     */
    patch: operations["updatePermissions"];
  };
  "/permissions/me": {
    /**
     * List My Permissions
     * @description List the permissions that apply to the current user.
     */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /**
     * Retrieve a Permission
     * @description Retrieve a single permissions object by unique identifier.
     */
    get: operations["getPermission"];
    /**
     * Delete a Permission
     * @description Delete an existing permission
     */
    delete: operations["deletePermission"];
    /**
     * Update a Permission
     * @description Update an existing permission
     */
    patch: operations["updatePermission"];
  };
  "/revisions": {
    /**
     * List Revisions
     * @description List the revisions.
     */
    get: operations["getRevisions"];
  };
  "/revisions/{id}": {
    /**
     * Retrieve a Revision
     * @description Retrieve a single revision by unique identifier.
     */
    get: operations["getRevision"];
  };
  "/relations": {
    /**
     * List Relations
     * @description List the relations.
     */
    get: operations["getRelations"];
    /**
     * Create a Relation
     * @description Create a new relation.
     */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /**
     * Retrieve a Relation
     * @description Retrieve a single relation by unique identifier.
     */
    get: operations["getRelation"];
    /**
     * Delete a Relation
     * @description Delete an existing relation.
     */
    delete: operations["deleteRelation"];
    /**
     * Update a Relation
     * @description Update an existing relation
     */
    patch: operations["updateRelation"];
  };
  "/webhooks": {
    /**
     * List Webhooks
     * @description Get all webhooks.
     */
    get: operations["getWebhooks"];
    /**
     * Create a Webhook
     * @description Create a new webhook.
     */
    post: operations["createWebhook"];
    /**
     * Delete Multiple Webhooks
     * @description Delete multiple existing webhooks.
     */
    delete: operations["deleteWebhooks"];
    /**
     * Update Multiple Webhooks
     * @description Update multiple webhooks at the same time.
     */
    patch: operations["updateWebhooks"];
  };
  "/webhooks/{id}": {
    /**
     * Retrieve a Webhook
     * @description Retrieve a single webhook by unique identifier.
     */
    get: operations["getWebhook"];
    /**
     * Delete a Webhook
     * @description Delete an existing webhook
     */
    delete: operations["deleteWebhook"];
    /**
     * Update a Webhook
     * @description Update an existing webhook
     */
    patch: operations["updateWebhook"];
  };
  "/settings": {
    /**
     * Retrieve Settings
     * @description List the settings.
     */
    get: operations["getSettings"];
    /**
     * Update Settings
     * @description Update the settings
     */
    patch: operations["updateSetting"];
  };
  "/flows": {
    /**
     * List Flows
     * @description Get all flows.
     */
    get: operations["getFlows"];
    /**
     * Create a Flow
     * @description Create a new flow.
     */
    post: operations["createFlow"];
    /**
     * Delete Multiple Flows
     * @description Delete multiple existing flows.
     */
    delete: operations["deleteFlows"];
    /**
     * Update Multiple Flows
     * @description Update multiple flows at the same time.
     */
    patch: operations["updateFlows"];
  };
  "/flows/{id}": {
    /**
     * Retrieve a Flow
     * @description Retrieve a single flow by unique identifier.
     */
    get: operations["getFlow"];
    /**
     * Delete a Flow
     * @description Delete an existing flow
     */
    delete: operations["deleteFlow"];
    /**
     * Update a Flow
     * @description Update an existing flow
     */
    patch: operations["updateFlow"];
  };
  "/operations": {
    /**
     * List Operations
     * @description Get all operations.
     */
    get: operations["getOperations"];
    /**
     * Create an Operation
     * @description Create a new operation.
     */
    post: operations["createOperation"];
    /**
     * Delete Multiple Operations
     * @description Delete multiple existing operations.
     */
    delete: operations["deleteOperations"];
    /**
     * Update Multiple Operations
     * @description Update multiple operations at the same time.
     */
    patch: operations["updateOperations"];
  };
  "/operations/{id}": {
    /**
     * Retrieve an Operation
     * @description Retrieve a single operation by unique identifier.
     */
    get: operations["getOperation"];
    /**
     * Delete an Operation
     * @description Delete an existing operation
     */
    delete: operations["deleteOperation"];
    /**
     * Update an Operation
     * @description Update an existing operation
     */
    patch: operations["updateOperation"];
  };
  "/versions": {
    /**
     * List Content Versions
     * @description Get all Content Versions.
     */
    get: operations["getContentVersions"];
    /**
     * Create Multiple Content Versions
     * @description Create multiple new Content Versions.
     */
    post: operations["createContentVersion"];
    /**
     * Delete Multiple Content Versions
     * @description Delete multiple existing Content Versions.
     */
    delete: operations["deleteContentVersions"];
    /**
     * Update Multiple Content Versions
     * @description Update multiple Content Versions at the same time.
     */
    patch: operations["updateContentVersions"];
  };
  "/versions/{id}": {
    /**
     * Retrieve a Content Version
     * @description Retrieve a single Content Version by unique identifier.
     */
    get: operations["getContentVersion"];
    /**
     * Delete a Content Version
     * @description Delete an existing Content Version.
     */
    delete: operations["deleteContentVersion"];
    /**
     * Update a Content Version
     * @description Update an existing Content Version.
     */
    patch: operations["updateContentVersion"];
  };
  "/versions/{id}/save": {
    /**
     * Save to a Content Version
     * @description Save item changes to an existing Content Version.
     */
    post: operations["saveContentVersion"];
  };
  "/versions/{id}/compare": {
    /**
     * Compare a Content Version
     * @description Compare an existing Content Version with the main version of the item.
     */
    get: operations["compareContentVersion"];
  };
  "/versions/{id}/promote": {
    /**
     * Promote a Content Version
     * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
     */
    post: operations["promoteContentVersion"];
  };
  "/items/de_dwd_data": {
    /**
     * List Items
     * @description List the de_dwd_data items.
     */
    get: operations["readItemsDeDwdData"];
    /**
     * Create an Item
     * @description Create a new de_dwd_data item.
     */
    post: operations["createItemsDeDwdData"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing de_dwd_data items.
     */
    delete: operations["deleteItemsDeDwdData"];
    /**
     * Update Multiple Items
     * @description Update multiple de_dwd_data items at the same time.
     */
    patch: operations["updateItemsDeDwdData"];
  };
  "/items/de_dwd_data/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single de_dwd_data item by unique identifier.
     */
    get: operations["readSingleItemsDeDwdData"];
    /**
     * Delete an Item
     * @description Delete an existing de_dwd_data item.
     */
    delete: operations["deleteSingleItemsDeDwdData"];
    /**
     * Update an Item
     * @description Update an existing de_dwd_data item.
     */
    patch: operations["updateSingleItemsDeDwdData"];
  };
  "/items/de_dwd_stations": {
    /**
     * List Items
     * @description List the de_dwd_stations items.
     */
    get: operations["readItemsDeDwdStations"];
    /**
     * Create an Item
     * @description Create a new de_dwd_stations item.
     */
    post: operations["createItemsDeDwdStations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing de_dwd_stations items.
     */
    delete: operations["deleteItemsDeDwdStations"];
    /**
     * Update Multiple Items
     * @description Update multiple de_dwd_stations items at the same time.
     */
    patch: operations["updateItemsDeDwdStations"];
  };
  "/items/de_dwd_stations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single de_dwd_stations item by unique identifier.
     */
    get: operations["readSingleItemsDeDwdStations"];
    /**
     * Delete an Item
     * @description Delete an existing de_dwd_stations item.
     */
    delete: operations["deleteSingleItemsDeDwdStations"];
    /**
     * Update an Item
     * @description Update an existing de_dwd_stations item.
     */
    patch: operations["updateSingleItemsDeDwdStations"];
  };
  "/items/renewable_share_15min": {
    /**
     * List Items
     * @description List the renewable_share_15min items.
     */
    get: operations["readItemsRenewableShare15min"];
    /**
     * Create an Item
     * @description Create a new renewable_share_15min item.
     */
    post: operations["createItemsRenewableShare15min"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing renewable_share_15min items.
     */
    delete: operations["deleteItemsRenewableShare15min"];
    /**
     * Update Multiple Items
     * @description Update multiple renewable_share_15min items at the same time.
     */
    patch: operations["updateItemsRenewableShare15min"];
  };
  "/items/renewable_share_15min/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single renewable_share_15min item by unique identifier.
     */
    get: operations["readSingleItemsRenewableShare15min"];
    /**
     * Delete an Item
     * @description Delete an existing renewable_share_15min item.
     */
    delete: operations["deleteSingleItemsRenewableShare15min"];
    /**
     * Update an Item
     * @description Update an existing renewable_share_15min item.
     */
    patch: operations["updateSingleItemsRenewableShare15min"];
  };
  "/items/block_toggle": {
    /**
     * List Items
     * @description List the block_toggle items.
     */
    get: operations["readItemsBlockToggle"];
    /**
     * Create an Item
     * @description Create a new block_toggle item.
     */
    post: operations["createItemsBlockToggle"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_toggle items.
     */
    delete: operations["deleteItemsBlockToggle"];
    /**
     * Update Multiple Items
     * @description Update multiple block_toggle items at the same time.
     */
    patch: operations["updateItemsBlockToggle"];
  };
  "/items/block_toggle/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_toggle item by unique identifier.
     */
    get: operations["readSingleItemsBlockToggle"];
    /**
     * Delete an Item
     * @description Delete an existing block_toggle item.
     */
    delete: operations["deleteSingleItemsBlockToggle"];
    /**
     * Update an Item
     * @description Update an existing block_toggle item.
     */
    patch: operations["updateSingleItemsBlockToggle"];
  };
  "/items/block_donation": {
    /**
     * List Items
     * @description List the block_donation items.
     */
    get: operations["readItemsBlockDonation"];
    /**
     * Create an Item
     * @description Create a new block_donation item.
     */
    post: operations["createItemsBlockDonation"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_donation items.
     */
    delete: operations["deleteItemsBlockDonation"];
    /**
     * Update Multiple Items
     * @description Update multiple block_donation items at the same time.
     */
    patch: operations["updateItemsBlockDonation"];
  };
  "/items/block_donation/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_donation item by unique identifier.
     */
    get: operations["readSingleItemsBlockDonation"];
    /**
     * Delete an Item
     * @description Delete an existing block_donation item.
     */
    delete: operations["deleteSingleItemsBlockDonation"];
    /**
     * Update an Item
     * @description Update an existing block_donation item.
     */
    patch: operations["updateSingleItemsBlockDonation"];
  };
  "/items/block_quiz": {
    /**
     * List Items
     * @description List the block_quiz items.
     */
    get: operations["readItemsBlockQuiz"];
    /**
     * Create an Item
     * @description Create a new block_quiz item.
     */
    post: operations["createItemsBlockQuiz"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_quiz items.
     */
    delete: operations["deleteItemsBlockQuiz"];
    /**
     * Update Multiple Items
     * @description Update multiple block_quiz items at the same time.
     */
    patch: operations["updateItemsBlockQuiz"];
  };
  "/items/block_quiz/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_quiz item by unique identifier.
     */
    get: operations["readSingleItemsBlockQuiz"];
    /**
     * Delete an Item
     * @description Delete an existing block_quiz item.
     */
    delete: operations["deleteSingleItemsBlockQuiz"];
    /**
     * Update an Item
     * @description Update an existing block_quiz item.
     */
    patch: operations["updateSingleItemsBlockQuiz"];
  };
  "/items/pages": {
    /**
     * List Items
     * @description List the pages items.
     */
    get: operations["readItemsPages"];
    /**
     * Create an Item
     * @description Create a new pages item.
     */
    post: operations["createItemsPages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages items.
     */
    delete: operations["deleteItemsPages"];
    /**
     * Update Multiple Items
     * @description Update multiple pages items at the same time.
     */
    patch: operations["updateItemsPages"];
  };
  "/items/pages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages item by unique identifier.
     */
    get: operations["readSingleItemsPages"];
    /**
     * Delete an Item
     * @description Delete an existing pages item.
     */
    delete: operations["deleteSingleItemsPages"];
    /**
     * Update an Item
     * @description Update an existing pages item.
     */
    patch: operations["updateSingleItemsPages"];
  };
  "/items/charts": {
    /**
     * List Items
     * @description List the charts items.
     */
    get: operations["readItemsCharts"];
    /**
     * Create an Item
     * @description Create a new charts item.
     */
    post: operations["createItemsCharts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing charts items.
     */
    delete: operations["deleteItemsCharts"];
    /**
     * Update Multiple Items
     * @description Update multiple charts items at the same time.
     */
    patch: operations["updateItemsCharts"];
  };
  "/items/charts/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single charts item by unique identifier.
     */
    get: operations["readSingleItemsCharts"];
    /**
     * Delete an Item
     * @description Delete an existing charts item.
     */
    delete: operations["deleteSingleItemsCharts"];
    /**
     * Update an Item
     * @description Update an existing charts item.
     */
    patch: operations["updateSingleItemsCharts"];
  };
  "/items/news": {
    /**
     * List Items
     * @description List the news items.
     */
    get: operations["readItemsNews"];
    /**
     * Create an Item
     * @description Create a new news item.
     */
    post: operations["createItemsNews"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing news items.
     */
    delete: operations["deleteItemsNews"];
    /**
     * Update Multiple Items
     * @description Update multiple news items at the same time.
     */
    patch: operations["updateItemsNews"];
  };
  "/items/news/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single news item by unique identifier.
     */
    get: operations["readSingleItemsNews"];
    /**
     * Delete an Item
     * @description Delete an existing news item.
     */
    delete: operations["deleteSingleItemsNews"];
    /**
     * Update an Item
     * @description Update an existing news item.
     */
    patch: operations["updateSingleItemsNews"];
  };
  "/items/datasets": {
    /**
     * List Items
     * @description List the datasets items.
     */
    get: operations["readItemsDatasets"];
    /**
     * Create an Item
     * @description Create a new datasets item.
     */
    post: operations["createItemsDatasets"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing datasets items.
     */
    delete: operations["deleteItemsDatasets"];
    /**
     * Update Multiple Items
     * @description Update multiple datasets items at the same time.
     */
    patch: operations["updateItemsDatasets"];
  };
  "/items/datasets/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single datasets item by unique identifier.
     */
    get: operations["readSingleItemsDatasets"];
    /**
     * Delete an Item
     * @description Delete an existing datasets item.
     */
    delete: operations["deleteSingleItemsDatasets"];
    /**
     * Update an Item
     * @description Update an existing datasets item.
     */
    patch: operations["updateSingleItemsDatasets"];
  };
  "/items/seo": {
    /**
     * List Items
     * @description List the seo items.
     */
    get: operations["readItemsSEO"];
    /**
     * Create an Item
     * @description Create a new seo item.
     */
    post: operations["createItemsSEO"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing seo items.
     */
    delete: operations["deleteItemsSEO"];
    /**
     * Update Multiple Items
     * @description Update multiple seo items at the same time.
     */
    patch: operations["updateItemsSEO"];
  };
  "/items/seo/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single seo item by unique identifier.
     */
    get: operations["readSingleItemsSEO"];
    /**
     * Delete an Item
     * @description Delete an existing seo item.
     */
    delete: operations["deleteSingleItemsSEO"];
    /**
     * Update an Item
     * @description Update an existing seo item.
     */
    patch: operations["updateSingleItemsSEO"];
  };
  "/items/countries": {
    /**
     * List Items
     * @description List the countries items.
     */
    get: operations["readItemsCountries"];
    /**
     * Create an Item
     * @description Create a new countries item.
     */
    post: operations["createItemsCountries"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing countries items.
     */
    delete: operations["deleteItemsCountries"];
    /**
     * Update Multiple Items
     * @description Update multiple countries items at the same time.
     */
    patch: operations["updateItemsCountries"];
  };
  "/items/countries/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single countries item by unique identifier.
     */
    get: operations["readSingleItemsCountries"];
    /**
     * Delete an Item
     * @description Delete an existing countries item.
     */
    delete: operations["deleteSingleItemsCountries"];
    /**
     * Update an Item
     * @description Update an existing countries item.
     */
    patch: operations["updateSingleItemsCountries"];
  };
  "/items/block_chart": {
    /**
     * List Items
     * @description List the block_chart items.
     */
    get: operations["readItemsBlockChart"];
    /**
     * Create an Item
     * @description Create a new block_chart item.
     */
    post: operations["createItemsBlockChart"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_chart items.
     */
    delete: operations["deleteItemsBlockChart"];
    /**
     * Update Multiple Items
     * @description Update multiple block_chart items at the same time.
     */
    patch: operations["updateItemsBlockChart"];
  };
  "/items/block_chart/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_chart item by unique identifier.
     */
    get: operations["readSingleItemsBlockChart"];
    /**
     * Delete an Item
     * @description Delete an existing block_chart item.
     */
    delete: operations["deleteSingleItemsBlockChart"];
    /**
     * Update an Item
     * @description Update an existing block_chart item.
     */
    patch: operations["updateSingleItemsBlockChart"];
  };
  "/items/at_geosphere_data": {
    /**
     * List Items
     * @description List the at_geosphere_data items.
     */
    get: operations["readItemsAtGeosphereData"];
    /**
     * Create an Item
     * @description Create a new at_geosphere_data item.
     */
    post: operations["createItemsAtGeosphereData"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing at_geosphere_data items.
     */
    delete: operations["deleteItemsAtGeosphereData"];
    /**
     * Update Multiple Items
     * @description Update multiple at_geosphere_data items at the same time.
     */
    patch: operations["updateItemsAtGeosphereData"];
  };
  "/items/at_geosphere_data/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single at_geosphere_data item by unique identifier.
     */
    get: operations["readSingleItemsAtGeosphereData"];
    /**
     * Delete an Item
     * @description Delete an existing at_geosphere_data item.
     */
    delete: operations["deleteSingleItemsAtGeosphereData"];
    /**
     * Update an Item
     * @description Update an existing at_geosphere_data item.
     */
    patch: operations["updateSingleItemsAtGeosphereData"];
  };
  "/items/at_geosphere_stations": {
    /**
     * List Items
     * @description List the at_geosphere_stations items.
     */
    get: operations["readItemsAtGeosphereStations"];
    /**
     * Create an Item
     * @description Create a new at_geosphere_stations item.
     */
    post: operations["createItemsAtGeosphereStations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing at_geosphere_stations items.
     */
    delete: operations["deleteItemsAtGeosphereStations"];
    /**
     * Update Multiple Items
     * @description Update multiple at_geosphere_stations items at the same time.
     */
    patch: operations["updateItemsAtGeosphereStations"];
  };
  "/items/at_geosphere_stations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single at_geosphere_stations item by unique identifier.
     */
    get: operations["readSingleItemsAtGeosphereStations"];
    /**
     * Delete an Item
     * @description Delete an existing at_geosphere_stations item.
     */
    delete: operations["deleteSingleItemsAtGeosphereStations"];
    /**
     * Update an Item
     * @description Update an existing at_geosphere_stations item.
     */
    patch: operations["updateSingleItemsAtGeosphereStations"];
  };
  "/items/pages_translations": {
    /**
     * List Items
     * @description List the pages_translations items.
     */
    get: operations["readItemsPagesTranslations"];
    /**
     * Create an Item
     * @description Create a new pages_translations item.
     */
    post: operations["createItemsPagesTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_translations items.
     */
    delete: operations["deleteItemsPagesTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_translations items at the same time.
     */
    patch: operations["updateItemsPagesTranslations"];
  };
  "/items/pages_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_translations item by unique identifier.
     */
    get: operations["readSingleItemsPagesTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing pages_translations item.
     */
    delete: operations["deleteSingleItemsPagesTranslations"];
    /**
     * Update an Item
     * @description Update an existing pages_translations item.
     */
    patch: operations["updateSingleItemsPagesTranslations"];
  };
  "/items/block_richtext": {
    /**
     * List Items
     * @description List the block_richtext items.
     */
    get: operations["readItemsBlockRichtext"];
    /**
     * Create an Item
     * @description Create a new block_richtext item.
     */
    post: operations["createItemsBlockRichtext"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_richtext items.
     */
    delete: operations["deleteItemsBlockRichtext"];
    /**
     * Update Multiple Items
     * @description Update multiple block_richtext items at the same time.
     */
    patch: operations["updateItemsBlockRichtext"];
  };
  "/items/block_richtext/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_richtext item by unique identifier.
     */
    get: operations["readSingleItemsBlockRichtext"];
    /**
     * Delete an Item
     * @description Delete an existing block_richtext item.
     */
    delete: operations["deleteSingleItemsBlockRichtext"];
    /**
     * Update an Item
     * @description Update an existing block_richtext item.
     */
    patch: operations["updateSingleItemsBlockRichtext"];
  };
  "/items/block_chart_charts": {
    /**
     * List Items
     * @description List the block_chart_charts items.
     */
    get: operations["readItemsBlockChartCharts"];
    /**
     * Create an Item
     * @description Create a new block_chart_charts item.
     */
    post: operations["createItemsBlockChartCharts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_chart_charts items.
     */
    delete: operations["deleteItemsBlockChartCharts"];
    /**
     * Update Multiple Items
     * @description Update multiple block_chart_charts items at the same time.
     */
    patch: operations["updateItemsBlockChartCharts"];
  };
  "/items/block_chart_charts/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_chart_charts item by unique identifier.
     */
    get: operations["readSingleItemsBlockChartCharts"];
    /**
     * Delete an Item
     * @description Delete an existing block_chart_charts item.
     */
    delete: operations["deleteSingleItemsBlockChartCharts"];
    /**
     * Update an Item
     * @description Update an existing block_chart_charts item.
     */
    patch: operations["updateSingleItemsBlockChartCharts"];
  };
  "/items/languages": {
    /**
     * List Items
     * @description List the languages items.
     */
    get: operations["readItemsLanguages"];
    /**
     * Create an Item
     * @description Create a new languages item.
     */
    post: operations["createItemsLanguages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing languages items.
     */
    delete: operations["deleteItemsLanguages"];
    /**
     * Update Multiple Items
     * @description Update multiple languages items at the same time.
     */
    patch: operations["updateItemsLanguages"];
  };
  "/items/languages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single languages item by unique identifier.
     */
    get: operations["readSingleItemsLanguages"];
    /**
     * Delete an Item
     * @description Delete an existing languages item.
     */
    delete: operations["deleteSingleItemsLanguages"];
    /**
     * Update an Item
     * @description Update an existing languages item.
     */
    patch: operations["updateSingleItemsLanguages"];
  };
  "/items/de_wind_power_plants": {
    /**
     * List Items
     * @description List the de_wind_power_plants items.
     */
    get: operations["readItemsDeWindPowerPlants"];
    /**
     * Create an Item
     * @description Create a new de_wind_power_plants item.
     */
    post: operations["createItemsDeWindPowerPlants"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing de_wind_power_plants items.
     */
    delete: operations["deleteItemsDeWindPowerPlants"];
    /**
     * Update Multiple Items
     * @description Update multiple de_wind_power_plants items at the same time.
     */
    patch: operations["updateItemsDeWindPowerPlants"];
  };
  "/items/de_wind_power_plants/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single de_wind_power_plants item by unique identifier.
     */
    get: operations["readSingleItemsDeWindPowerPlants"];
    /**
     * Delete an Item
     * @description Delete an existing de_wind_power_plants item.
     */
    delete: operations["deleteSingleItemsDeWindPowerPlants"];
    /**
     * Update an Item
     * @description Update an existing de_wind_power_plants item.
     */
    patch: operations["updateSingleItemsDeWindPowerPlants"];
  };
  "/items/units_solar": {
    /**
     * List Items
     * @description List the units_solar items.
     */
    get: operations["readItemsUnitsSolar"];
    /**
     * Create an Item
     * @description Create a new units_solar item.
     */
    post: operations["createItemsUnitsSolar"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing units_solar items.
     */
    delete: operations["deleteItemsUnitsSolar"];
    /**
     * Update Multiple Items
     * @description Update multiple units_solar items at the same time.
     */
    patch: operations["updateItemsUnitsSolar"];
  };
  "/items/units_solar/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single units_solar item by unique identifier.
     */
    get: operations["readSingleItemsUnitsSolar"];
    /**
     * Delete an Item
     * @description Delete an existing units_solar item.
     */
    delete: operations["deleteSingleItemsUnitsSolar"];
    /**
     * Update an Item
     * @description Update an existing units_solar item.
     */
    patch: operations["updateSingleItemsUnitsSolar"];
  };
  "/items/block_quotes": {
    /**
     * List Items
     * @description List the block_quotes items.
     */
    get: operations["readItemsBlockQuotes"];
    /**
     * Create an Item
     * @description Create a new block_quotes item.
     */
    post: operations["createItemsBlockQuotes"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_quotes items.
     */
    delete: operations["deleteItemsBlockQuotes"];
    /**
     * Update Multiple Items
     * @description Update multiple block_quotes items at the same time.
     */
    patch: operations["updateItemsBlockQuotes"];
  };
  "/items/block_quotes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_quotes item by unique identifier.
     */
    get: operations["readSingleItemsBlockQuotes"];
    /**
     * Delete an Item
     * @description Delete an existing block_quotes item.
     */
    delete: operations["deleteSingleItemsBlockQuotes"];
    /**
     * Update an Item
     * @description Update an existing block_quotes item.
     */
    patch: operations["updateSingleItemsBlockQuotes"];
  };
  "/items/quotes": {
    /**
     * List Items
     * @description List the quotes items.
     */
    get: operations["readItemsQuotes"];
    /**
     * Create an Item
     * @description Create a new quotes item.
     */
    post: operations["createItemsQuotes"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing quotes items.
     */
    delete: operations["deleteItemsQuotes"];
    /**
     * Update Multiple Items
     * @description Update multiple quotes items at the same time.
     */
    patch: operations["updateItemsQuotes"];
  };
  "/items/quotes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single quotes item by unique identifier.
     */
    get: operations["readSingleItemsQuotes"];
    /**
     * Delete an Item
     * @description Delete an existing quotes item.
     */
    delete: operations["deleteSingleItemsQuotes"];
    /**
     * Update an Item
     * @description Update an existing quotes item.
     */
    patch: operations["updateSingleItemsQuotes"];
  };
  "/items/test_dataset": {
    /**
     * List Items
     * @description List the test_dataset items.
     */
    get: operations["readItemsTestDataset"];
    /**
     * Create an Item
     * @description Create a new test_dataset item.
     */
    post: operations["createItemsTestDataset"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing test_dataset items.
     */
    delete: operations["deleteItemsTestDataset"];
    /**
     * Update Multiple Items
     * @description Update multiple test_dataset items at the same time.
     */
    patch: operations["updateItemsTestDataset"];
  };
  "/items/test_dataset/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single test_dataset item by unique identifier.
     */
    get: operations["readSingleItemsTestDataset"];
    /**
     * Delete an Item
     * @description Delete an existing test_dataset item.
     */
    delete: operations["deleteSingleItemsTestDataset"];
    /**
     * Update an Item
     * @description Update an existing test_dataset item.
     */
    patch: operations["updateSingleItemsTestDataset"];
  };
  "/items/regions": {
    /**
     * List Items
     * @description List the regions items.
     */
    get: operations["readItemsRegions"];
    /**
     * Create an Item
     * @description Create a new regions item.
     */
    post: operations["createItemsRegions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing regions items.
     */
    delete: operations["deleteItemsRegions"];
    /**
     * Update Multiple Items
     * @description Update multiple regions items at the same time.
     */
    patch: operations["updateItemsRegions"];
  };
  "/items/regions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single regions item by unique identifier.
     */
    get: operations["readSingleItemsRegions"];
    /**
     * Delete an Item
     * @description Delete an existing regions item.
     */
    delete: operations["deleteSingleItemsRegions"];
    /**
     * Update an Item
     * @description Update an existing regions item.
     */
    patch: operations["updateSingleItemsRegions"];
  };
  "/items/mastr_solar": {
    /**
     * List Items
     * @description List the mastr_solar items.
     */
    get: operations["readItemsMastrSolar"];
    /**
     * Create an Item
     * @description Create a new mastr_solar item.
     */
    post: operations["createItemsMastrSolar"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing mastr_solar items.
     */
    delete: operations["deleteItemsMastrSolar"];
    /**
     * Update Multiple Items
     * @description Update multiple mastr_solar items at the same time.
     */
    patch: operations["updateItemsMastrSolar"];
  };
  "/items/mastr_solar/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single mastr_solar item by unique identifier.
     */
    get: operations["readSingleItemsMastrSolar"];
    /**
     * Delete an Item
     * @description Delete an existing mastr_solar item.
     */
    delete: operations["deleteSingleItemsMastrSolar"];
    /**
     * Update an Item
     * @description Update an existing mastr_solar item.
     */
    patch: operations["updateSingleItemsMastrSolar"];
  };
  "/items/pages_translations_blocks": {
    /**
     * List Items
     * @description List the pages_translations_blocks items.
     */
    get: operations["readItemsPagesTranslationsBlocks"];
    /**
     * Create an Item
     * @description Create a new pages_translations_blocks item.
     */
    post: operations["createItemsPagesTranslationsBlocks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_translations_blocks items.
     */
    delete: operations["deleteItemsPagesTranslationsBlocks"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_translations_blocks items at the same time.
     */
    patch: operations["updateItemsPagesTranslationsBlocks"];
  };
  "/items/pages_translations_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_translations_blocks item by unique identifier.
     */
    get: operations["readSingleItemsPagesTranslationsBlocks"];
    /**
     * Delete an Item
     * @description Delete an existing pages_translations_blocks item.
     */
    delete: operations["deleteSingleItemsPagesTranslationsBlocks"];
    /**
     * Update an Item
     * @description Update an existing pages_translations_blocks item.
     */
    patch: operations["updateSingleItemsPagesTranslationsBlocks"];
  };
  "/items/renewable_share_daily": {
    /**
     * List Items
     * @description List the renewable_share_daily items.
     */
    get: operations["readItemsRenewableShareDaily"];
    /**
     * Create an Item
     * @description Create a new renewable_share_daily item.
     */
    post: operations["createItemsRenewableShareDaily"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing renewable_share_daily items.
     */
    delete: operations["deleteItemsRenewableShareDaily"];
    /**
     * Update Multiple Items
     * @description Update multiple renewable_share_daily items at the same time.
     */
    patch: operations["updateItemsRenewableShareDaily"];
  };
  "/items/renewable_share_daily/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single renewable_share_daily item by unique identifier.
     */
    get: operations["readSingleItemsRenewableShareDaily"];
    /**
     * Delete an Item
     * @description Delete an existing renewable_share_daily item.
     */
    delete: operations["deleteSingleItemsRenewableShareDaily"];
    /**
     * Update an Item
     * @description Update an existing renewable_share_daily item.
     */
    patch: operations["updateSingleItemsRenewableShareDaily"];
  };
  "/extensions": {
    /**
     * List Extensions
     * @description List the installed extensions and their configuration in the project.
     */
    get: operations["listExtensions"];
  };
  "/extensions/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensions"];
  };
  "/extensions/{bundle}/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensionBundle"];
  };
  "/items/carbon_prices": {
    /**
     * List Items
     * @description List the carbon_prices items.
     */
    get: operations["readItemsCarbonPrices"];
    /**
     * Create an Item
     * @description Create a new carbon_prices item.
     */
    post: operations["createItemsCarbonPrices"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing carbon_prices items.
     */
    delete: operations["deleteItemsCarbonPrices"];
    /**
     * Update Multiple Items
     * @description Update multiple carbon_prices items at the same time.
     */
    patch: operations["updateItemsCarbonPrices"];
  };
  "/items/carbon_prices/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single carbon_prices item by unique identifier.
     */
    get: operations["readSingleItemsCarbonPrices"];
    /**
     * Delete an Item
     * @description Delete an existing carbon_prices item.
     */
    delete: operations["deleteSingleItemsCarbonPrices"];
    /**
     * Update an Item
     * @description Update an existing carbon_prices item.
     */
    patch: operations["updateSingleItemsCarbonPrices"];
  };
  "/items/global_co2_concentration": {
    /**
     * List Items
     * @description List the global_co2_concentration items.
     */
    get: operations["readItemsGlobalCo2Concentration"];
    /**
     * Create an Item
     * @description Create a new global_co2_concentration item.
     */
    post: operations["createItemsGlobalCo2Concentration"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing global_co2_concentration items.
     */
    delete: operations["deleteItemsGlobalCo2Concentration"];
    /**
     * Update Multiple Items
     * @description Update multiple global_co2_concentration items at the same time.
     */
    patch: operations["updateItemsGlobalCo2Concentration"];
  };
  "/items/global_co2_concentration/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single global_co2_concentration item by unique identifier.
     */
    get: operations["readSingleItemsGlobalCo2Concentration"];
    /**
     * Delete an Item
     * @description Delete an existing global_co2_concentration item.
     */
    delete: operations["deleteSingleItemsGlobalCo2Concentration"];
    /**
     * Update an Item
     * @description Update an existing global_co2_concentration item.
     */
    patch: operations["updateSingleItemsGlobalCo2Concentration"];
  };
  "/items/block_items": {
    /**
     * List Items
     * @description List the block_items items.
     */
    get: operations["readItemsBlockItems"];
    /**
     * Create an Item
     * @description Create a new block_items item.
     */
    post: operations["createItemsBlockItems"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_items items.
     */
    delete: operations["deleteItemsBlockItems"];
    /**
     * Update Multiple Items
     * @description Update multiple block_items items at the same time.
     */
    patch: operations["updateItemsBlockItems"];
  };
  "/items/block_items/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_items item by unique identifier.
     */
    get: operations["readSingleItemsBlockItems"];
    /**
     * Delete an Item
     * @description Delete an existing block_items item.
     */
    delete: operations["deleteSingleItemsBlockItems"];
    /**
     * Update an Item
     * @description Update an existing block_items item.
     */
    patch: operations["updateSingleItemsBlockItems"];
  };
  "/items/block_teaser": {
    /**
     * List Items
     * @description List the block_teaser items.
     */
    get: operations["readItemsBlockTeaser"];
    /**
     * Create an Item
     * @description Create a new block_teaser item.
     */
    post: operations["createItemsBlockTeaser"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_teaser items.
     */
    delete: operations["deleteItemsBlockTeaser"];
    /**
     * Update Multiple Items
     * @description Update multiple block_teaser items at the same time.
     */
    patch: operations["updateItemsBlockTeaser"];
  };
  "/items/block_teaser/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_teaser item by unique identifier.
     */
    get: operations["readSingleItemsBlockTeaser"];
    /**
     * Delete an Item
     * @description Delete an existing block_teaser item.
     */
    delete: operations["deleteSingleItemsBlockTeaser"];
    /**
     * Update an Item
     * @description Update an existing block_teaser item.
     */
    patch: operations["updateSingleItemsBlockTeaser"];
  };
  "/items/companies_companies_sectors": {
    /**
     * List Items
     * @description List the companies_companies_sectors items.
     */
    get: operations["readItemsCompaniesCompaniesSectors"];
    /**
     * Create an Item
     * @description Create a new companies_companies_sectors item.
     */
    post: operations["createItemsCompaniesCompaniesSectors"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing companies_companies_sectors items.
     */
    delete: operations["deleteItemsCompaniesCompaniesSectors"];
    /**
     * Update Multiple Items
     * @description Update multiple companies_companies_sectors items at the same time.
     */
    patch: operations["updateItemsCompaniesCompaniesSectors"];
  };
  "/items/companies_companies_sectors/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single companies_companies_sectors item by unique identifier.
     */
    get: operations["readSingleItemsCompaniesCompaniesSectors"];
    /**
     * Delete an Item
     * @description Delete an existing companies_companies_sectors item.
     */
    delete: operations["deleteSingleItemsCompaniesCompaniesSectors"];
    /**
     * Update an Item
     * @description Update an existing companies_companies_sectors item.
     */
    patch: operations["updateSingleItemsCompaniesCompaniesSectors"];
  };
  "/items/sites": {
    /**
     * List Items
     * @description List the sites items.
     */
    get: operations["readItemsSites"];
    /**
     * Create an Item
     * @description Create a new sites item.
     */
    post: operations["createItemsSites"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing sites items.
     */
    delete: operations["deleteItemsSites"];
    /**
     * Update Multiple Items
     * @description Update multiple sites items at the same time.
     */
    patch: operations["updateItemsSites"];
  };
  "/items/sites/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sites item by unique identifier.
     */
    get: operations["readSingleItemsSites"];
    /**
     * Delete an Item
     * @description Delete an existing sites item.
     */
    delete: operations["deleteSingleItemsSites"];
    /**
     * Update an Item
     * @description Update an existing sites item.
     */
    patch: operations["updateSingleItemsSites"];
  };
  "/items/companies_sectors": {
    /**
     * List Items
     * @description List the companies_sectors items.
     */
    get: operations["readItemsCompaniesSectors"];
    /**
     * Create an Item
     * @description Create a new companies_sectors item.
     */
    post: operations["createItemsCompaniesSectors"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing companies_sectors items.
     */
    delete: operations["deleteItemsCompaniesSectors"];
    /**
     * Update Multiple Items
     * @description Update multiple companies_sectors items at the same time.
     */
    patch: operations["updateItemsCompaniesSectors"];
  };
  "/items/companies_sectors/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single companies_sectors item by unique identifier.
     */
    get: operations["readSingleItemsCompaniesSectors"];
    /**
     * Delete an Item
     * @description Delete an existing companies_sectors item.
     */
    delete: operations["deleteSingleItemsCompaniesSectors"];
    /**
     * Update an Item
     * @description Update an existing companies_sectors item.
     */
    patch: operations["updateSingleItemsCompaniesSectors"];
  };
  "/items/charts_translations": {
    /**
     * List Items
     * @description List the charts_translations items.
     */
    get: operations["readItemsChartsTranslations"];
    /**
     * Create an Item
     * @description Create a new charts_translations item.
     */
    post: operations["createItemsChartsTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing charts_translations items.
     */
    delete: operations["deleteItemsChartsTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple charts_translations items at the same time.
     */
    patch: operations["updateItemsChartsTranslations"];
  };
  "/items/charts_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single charts_translations item by unique identifier.
     */
    get: operations["readSingleItemsChartsTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing charts_translations item.
     */
    delete: operations["deleteSingleItemsChartsTranslations"];
    /**
     * Update an Item
     * @description Update an existing charts_translations item.
     */
    patch: operations["updateSingleItemsChartsTranslations"];
  };
  "/items/quiz_questions": {
    /**
     * List Items
     * @description List the quiz_questions items.
     */
    get: operations["readItemsQuizQuestions"];
    /**
     * Create an Item
     * @description Create a new quiz_questions item.
     */
    post: operations["createItemsQuizQuestions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing quiz_questions items.
     */
    delete: operations["deleteItemsQuizQuestions"];
    /**
     * Update Multiple Items
     * @description Update multiple quiz_questions items at the same time.
     */
    patch: operations["updateItemsQuizQuestions"];
  };
  "/items/quiz_questions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single quiz_questions item by unique identifier.
     */
    get: operations["readSingleItemsQuizQuestions"];
    /**
     * Delete an Item
     * @description Delete an existing quiz_questions item.
     */
    delete: operations["deleteSingleItemsQuizQuestions"];
    /**
     * Update an Item
     * @description Update an existing quiz_questions item.
     */
    patch: operations["updateSingleItemsQuizQuestions"];
  };
  "/items/companies": {
    /**
     * List Items
     * @description List the companies items.
     */
    get: operations["readItemsCompanies"];
    /**
     * Create an Item
     * @description Create a new companies item.
     */
    post: operations["createItemsCompanies"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing companies items.
     */
    delete: operations["deleteItemsCompanies"];
    /**
     * Update Multiple Items
     * @description Update multiple companies items at the same time.
     */
    patch: operations["updateItemsCompanies"];
  };
  "/items/companies/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single companies item by unique identifier.
     */
    get: operations["readSingleItemsCompanies"];
    /**
     * Delete an Item
     * @description Delete an existing companies item.
     */
    delete: operations["deleteSingleItemsCompanies"];
    /**
     * Update an Item
     * @description Update an existing companies item.
     */
    patch: operations["updateSingleItemsCompanies"];
  };
  "/items/block_gallery": {
    /**
     * List Items
     * @description List the block_gallery items.
     */
    get: operations["readItemsBlockGallery"];
    /**
     * Create an Item
     * @description Create a new block_gallery item.
     */
    post: operations["createItemsBlockGallery"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_gallery items.
     */
    delete: operations["deleteItemsBlockGallery"];
    /**
     * Update Multiple Items
     * @description Update multiple block_gallery items at the same time.
     */
    patch: operations["updateItemsBlockGallery"];
  };
  "/items/block_gallery/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_gallery item by unique identifier.
     */
    get: operations["readSingleItemsBlockGallery"];
    /**
     * Delete an Item
     * @description Delete an existing block_gallery item.
     */
    delete: operations["deleteSingleItemsBlockGallery"];
    /**
     * Update an Item
     * @description Update an existing block_gallery item.
     */
    patch: operations["updateSingleItemsBlockGallery"];
  };
  "/items/quiz_answers": {
    /**
     * List Items
     * @description List the quiz_answers items.
     */
    get: operations["readItemsQuizAnswers"];
    /**
     * Create an Item
     * @description Create a new quiz_answers item.
     */
    post: operations["createItemsQuizAnswers"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing quiz_answers items.
     */
    delete: operations["deleteItemsQuizAnswers"];
    /**
     * Update Multiple Items
     * @description Update multiple quiz_answers items at the same time.
     */
    patch: operations["updateItemsQuizAnswers"];
  };
  "/items/quiz_answers/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single quiz_answers item by unique identifier.
     */
    get: operations["readSingleItemsQuizAnswers"];
    /**
     * Delete an Item
     * @description Delete an existing quiz_answers item.
     */
    delete: operations["deleteSingleItemsQuizAnswers"];
    /**
     * Update an Item
     * @description Update an existing quiz_answers item.
     */
    patch: operations["updateSingleItemsQuizAnswers"];
  };
  "/items/glossary_translations": {
    /**
     * List Items
     * @description List the glossary_translations items.
     */
    get: operations["readItemsGlossaryTranslations"];
    /**
     * Create an Item
     * @description Create a new glossary_translations item.
     */
    post: operations["createItemsGlossaryTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing glossary_translations items.
     */
    delete: operations["deleteItemsGlossaryTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple glossary_translations items at the same time.
     */
    patch: operations["updateItemsGlossaryTranslations"];
  };
  "/items/glossary_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single glossary_translations item by unique identifier.
     */
    get: operations["readSingleItemsGlossaryTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing glossary_translations item.
     */
    delete: operations["deleteSingleItemsGlossaryTranslations"];
    /**
     * Update an Item
     * @description Update an existing glossary_translations item.
     */
    patch: operations["updateSingleItemsGlossaryTranslations"];
  };
  "/items/block_grid": {
    /**
     * List Items
     * @description List the block_grid items.
     */
    get: operations["readItemsBlockGrid"];
    /**
     * Create an Item
     * @description Create a new block_grid item.
     */
    post: operations["createItemsBlockGrid"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_grid items.
     */
    delete: operations["deleteItemsBlockGrid"];
    /**
     * Update Multiple Items
     * @description Update multiple block_grid items at the same time.
     */
    patch: operations["updateItemsBlockGrid"];
  };
  "/items/block_grid/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_grid item by unique identifier.
     */
    get: operations["readSingleItemsBlockGrid"];
    /**
     * Delete an Item
     * @description Delete an existing block_grid item.
     */
    delete: operations["deleteSingleItemsBlockGrid"];
    /**
     * Update an Item
     * @description Update an existing block_grid item.
     */
    patch: operations["updateSingleItemsBlockGrid"];
  };
  "/items/emissions": {
    /**
     * List Items
     * @description List the emissions items.
     */
    get: operations["readItemsEmissions"];
    /**
     * Create an Item
     * @description Create a new emissions item.
     */
    post: operations["createItemsEmissions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing emissions items.
     */
    delete: operations["deleteItemsEmissions"];
    /**
     * Update Multiple Items
     * @description Update multiple emissions items at the same time.
     */
    patch: operations["updateItemsEmissions"];
  };
  "/items/emissions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single emissions item by unique identifier.
     */
    get: operations["readSingleItemsEmissions"];
    /**
     * Delete an Item
     * @description Delete an existing emissions item.
     */
    delete: operations["deleteSingleItemsEmissions"];
    /**
     * Update an Item
     * @description Update an existing emissions item.
     */
    patch: operations["updateSingleItemsEmissions"];
  };
  "/items/block_gallery_files": {
    /**
     * List Items
     * @description List the block_gallery_files items.
     */
    get: operations["readItemsBlockGalleryFiles"];
    /**
     * Create an Item
     * @description Create a new block_gallery_files item.
     */
    post: operations["createItemsBlockGalleryFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_gallery_files items.
     */
    delete: operations["deleteItemsBlockGalleryFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_gallery_files items at the same time.
     */
    patch: operations["updateItemsBlockGalleryFiles"];
  };
  "/items/block_gallery_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_gallery_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockGalleryFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_gallery_files item.
     */
    delete: operations["deleteSingleItemsBlockGalleryFiles"];
    /**
     * Update an Item
     * @description Update an existing block_gallery_files item.
     */
    patch: operations["updateSingleItemsBlockGalleryFiles"];
  };
  "/items/energy": {
    /**
     * List Items
     * @description List the energy items.
     */
    get: operations["readItemsEnergy"];
    /**
     * Create an Item
     * @description Create a new energy item.
     */
    post: operations["createItemsEnergy"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing energy items.
     */
    delete: operations["deleteItemsEnergy"];
    /**
     * Update Multiple Items
     * @description Update multiple energy items at the same time.
     */
    patch: operations["updateItemsEnergy"];
  };
  "/items/energy/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single energy item by unique identifier.
     */
    get: operations["readSingleItemsEnergy"];
    /**
     * Delete an Item
     * @description Delete an existing energy item.
     */
    delete: operations["deleteSingleItemsEnergy"];
    /**
     * Update an Item
     * @description Update an existing energy item.
     */
    patch: operations["updateSingleItemsEnergy"];
  };
  "/items/glossary": {
    /**
     * List Items
     * @description List the glossary items.
     */
    get: operations["readItemsGlossary"];
    /**
     * Create an Item
     * @description Create a new glossary item.
     */
    post: operations["createItemsGlossary"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing glossary items.
     */
    delete: operations["deleteItemsGlossary"];
    /**
     * Update Multiple Items
     * @description Update multiple glossary items at the same time.
     */
    patch: operations["updateItemsGlossary"];
  };
  "/items/glossary/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single glossary item by unique identifier.
     */
    get: operations["readSingleItemsGlossary"];
    /**
     * Delete an Item
     * @description Delete an existing glossary item.
     */
    delete: operations["deleteSingleItemsGlossary"];
    /**
     * Update an Item
     * @description Update an existing glossary item.
     */
    patch: operations["updateSingleItemsGlossary"];
  };
  "/items/companies_emissions": {
    /**
     * List Items
     * @description List the companies_emissions items.
     */
    get: operations["readItemsCompaniesEmissions"];
    /**
     * Create an Item
     * @description Create a new companies_emissions item.
     */
    post: operations["createItemsCompaniesEmissions"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing companies_emissions items.
     */
    delete: operations["deleteItemsCompaniesEmissions"];
    /**
     * Update Multiple Items
     * @description Update multiple companies_emissions items at the same time.
     */
    patch: operations["updateItemsCompaniesEmissions"];
  };
  "/items/companies_emissions/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single companies_emissions item by unique identifier.
     */
    get: operations["readSingleItemsCompaniesEmissions"];
    /**
     * Delete an Item
     * @description Delete an existing companies_emissions item.
     */
    delete: operations["deleteSingleItemsCompaniesEmissions"];
    /**
     * Update an Item
     * @description Update an existing companies_emissions item.
     */
    patch: operations["updateSingleItemsCompaniesEmissions"];
  };
  "/items/energy_renewable_share": {
    /**
     * List Items
     * @description List the energy_renewable_share items.
     */
    get: operations["readItemsEnergyRenewableShare"];
    /**
     * Create an Item
     * @description Create a new energy_renewable_share item.
     */
    post: operations["createItemsEnergyRenewableShare"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing energy_renewable_share items.
     */
    delete: operations["deleteItemsEnergyRenewableShare"];
    /**
     * Update Multiple Items
     * @description Update multiple energy_renewable_share items at the same time.
     */
    patch: operations["updateItemsEnergyRenewableShare"];
  };
  "/items/energy_renewable_share/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single energy_renewable_share item by unique identifier.
     */
    get: operations["readSingleItemsEnergyRenewableShare"];
    /**
     * Delete an Item
     * @description Delete an existing energy_renewable_share item.
     */
    delete: operations["deleteSingleItemsEnergyRenewableShare"];
    /**
     * Update an Item
     * @description Update an existing energy_renewable_share item.
     */
    patch: operations["updateSingleItemsEnergyRenewableShare"];
  };
  "/items/block_panel": {
    /**
     * List Items
     * @description List the block_panel items.
     */
    get: operations["readItemsBlockPanel"];
    /**
     * Create an Item
     * @description Create a new block_panel item.
     */
    post: operations["createItemsBlockPanel"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_panel items.
     */
    delete: operations["deleteItemsBlockPanel"];
    /**
     * Update Multiple Items
     * @description Update multiple block_panel items at the same time.
     */
    patch: operations["updateItemsBlockPanel"];
  };
  "/items/block_panel/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_panel item by unique identifier.
     */
    get: operations["readSingleItemsBlockPanel"];
    /**
     * Delete an Item
     * @description Delete an existing block_panel item.
     */
    delete: operations["deleteSingleItemsBlockPanel"];
    /**
     * Update an Item
     * @description Update an existing block_panel item.
     */
    patch: operations["updateSingleItemsBlockPanel"];
  };
  "/items/block_news": {
    /**
     * List Items
     * @description List the block_news items.
     */
    get: operations["readItemsBlockNews"];
    /**
     * Create an Item
     * @description Create a new block_news item.
     */
    post: operations["createItemsBlockNews"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_news items.
     */
    delete: operations["deleteItemsBlockNews"];
    /**
     * Update Multiple Items
     * @description Update multiple block_news items at the same time.
     */
    patch: operations["updateItemsBlockNews"];
  };
  "/items/block_news/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_news item by unique identifier.
     */
    get: operations["readSingleItemsBlockNews"];
    /**
     * Delete an Item
     * @description Delete an existing block_news item.
     */
    delete: operations["deleteSingleItemsBlockNews"];
    /**
     * Update an Item
     * @description Update an existing block_news item.
     */
    patch: operations["updateSingleItemsBlockNews"];
  };
  "/items/block_grid_blocks": {
    /**
     * List Items
     * @description List the block_grid_blocks items.
     */
    get: operations["readItemsBlockGridBlocks"];
    /**
     * Create an Item
     * @description Create a new block_grid_blocks item.
     */
    post: operations["createItemsBlockGridBlocks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_grid_blocks items.
     */
    delete: operations["deleteItemsBlockGridBlocks"];
    /**
     * Update Multiple Items
     * @description Update multiple block_grid_blocks items at the same time.
     */
    patch: operations["updateItemsBlockGridBlocks"];
  };
  "/items/block_grid_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_grid_blocks item by unique identifier.
     */
    get: operations["readSingleItemsBlockGridBlocks"];
    /**
     * Delete an Item
     * @description Delete an existing block_grid_blocks item.
     */
    delete: operations["deleteSingleItemsBlockGridBlocks"];
    /**
     * Update an Item
     * @description Update an existing block_grid_blocks item.
     */
    patch: operations["updateSingleItemsBlockGridBlocks"];
  };
  "/items/sites_translations": {
    /**
     * List Items
     * @description List the sites_translations items.
     */
    get: operations["readItemsSitesTranslations"];
    /**
     * Create an Item
     * @description Create a new sites_translations item.
     */
    post: operations["createItemsSitesTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing sites_translations items.
     */
    delete: operations["deleteItemsSitesTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple sites_translations items at the same time.
     */
    patch: operations["updateItemsSitesTranslations"];
  };
  "/items/sites_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single sites_translations item by unique identifier.
     */
    get: operations["readSingleItemsSitesTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing sites_translations item.
     */
    delete: operations["deleteSingleItemsSitesTranslations"];
    /**
     * Update an Item
     * @description Update an existing sites_translations item.
     */
    patch: operations["updateSingleItemsSitesTranslations"];
  };
  "/items/news_translations": {
    /**
     * List Items
     * @description List the news_translations items.
     */
    get: operations["readItemsNewsTranslations"];
    /**
     * Create an Item
     * @description Create a new news_translations item.
     */
    post: operations["createItemsNewsTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing news_translations items.
     */
    delete: operations["deleteItemsNewsTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple news_translations items at the same time.
     */
    patch: operations["updateItemsNewsTranslations"];
  };
  "/items/news_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single news_translations item by unique identifier.
     */
    get: operations["readSingleItemsNewsTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing news_translations item.
     */
    delete: operations["deleteSingleItemsNewsTranslations"];
    /**
     * Update an Item
     * @description Update an existing news_translations item.
     */
    patch: operations["updateSingleItemsNewsTranslations"];
  };
  "/items/pages_blocks": {
    /**
     * List Items
     * @description List the pages_blocks items.
     */
    get: operations["readItemsPagesBlocks"];
    /**
     * Create an Item
     * @description Create a new pages_blocks item.
     */
    post: operations["createItemsPagesBlocks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_blocks items.
     */
    delete: operations["deleteItemsPagesBlocks"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_blocks items at the same time.
     */
    patch: operations["updateItemsPagesBlocks"];
  };
  "/items/pages_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_blocks item by unique identifier.
     */
    get: operations["readSingleItemsPagesBlocks"];
    /**
     * Delete an Item
     * @description Delete an existing pages_blocks item.
     */
    delete: operations["deleteSingleItemsPagesBlocks"];
    /**
     * Update an Item
     * @description Update an existing pages_blocks item.
     */
    patch: operations["updateSingleItemsPagesBlocks"];
  };
  "/items/block_teaser_translations": {
    /**
     * List Items
     * @description List the block_teaser_translations items.
     */
    get: operations["readItemsBlockTeaserTranslations"];
    /**
     * Create an Item
     * @description Create a new block_teaser_translations item.
     */
    post: operations["createItemsBlockTeaserTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_teaser_translations items.
     */
    delete: operations["deleteItemsBlockTeaserTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_teaser_translations items at the same time.
     */
    patch: operations["updateItemsBlockTeaserTranslations"];
  };
  "/items/block_teaser_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_teaser_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockTeaserTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_teaser_translations item.
     */
    delete: operations["deleteSingleItemsBlockTeaserTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_teaser_translations item.
     */
    patch: operations["updateSingleItemsBlockTeaserTranslations"];
  };
  "/items/block_richtext_translations": {
    /**
     * List Items
     * @description List the block_richtext_translations items.
     */
    get: operations["readItemsBlockRichtextTranslations"];
    /**
     * Create an Item
     * @description Create a new block_richtext_translations item.
     */
    post: operations["createItemsBlockRichtextTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_richtext_translations items.
     */
    delete: operations["deleteItemsBlockRichtextTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_richtext_translations items at the same time.
     */
    patch: operations["updateItemsBlockRichtextTranslations"];
  };
  "/items/block_richtext_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_richtext_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockRichtextTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_richtext_translations item.
     */
    delete: operations["deleteSingleItemsBlockRichtextTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_richtext_translations item.
     */
    patch: operations["updateSingleItemsBlockRichtextTranslations"];
  };
  "/items/block_toggle_translations": {
    /**
     * List Items
     * @description List the block_toggle_translations items.
     */
    get: operations["readItemsBlockToggleTranslations"];
    /**
     * Create an Item
     * @description Create a new block_toggle_translations item.
     */
    post: operations["createItemsBlockToggleTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_toggle_translations items.
     */
    delete: operations["deleteItemsBlockToggleTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_toggle_translations items at the same time.
     */
    patch: operations["updateItemsBlockToggleTranslations"];
  };
  "/items/block_toggle_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_toggle_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockToggleTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_toggle_translations item.
     */
    delete: operations["deleteSingleItemsBlockToggleTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_toggle_translations item.
     */
    patch: operations["updateSingleItemsBlockToggleTranslations"];
  };
  "/items/block_panel_translations": {
    /**
     * List Items
     * @description List the block_panel_translations items.
     */
    get: operations["readItemsBlockPanelTranslations"];
    /**
     * Create an Item
     * @description Create a new block_panel_translations item.
     */
    post: operations["createItemsBlockPanelTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_panel_translations items.
     */
    delete: operations["deleteItemsBlockPanelTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_panel_translations items at the same time.
     */
    patch: operations["updateItemsBlockPanelTranslations"];
  };
  "/items/block_panel_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_panel_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockPanelTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_panel_translations item.
     */
    delete: operations["deleteSingleItemsBlockPanelTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_panel_translations item.
     */
    patch: operations["updateSingleItemsBlockPanelTranslations"];
  };
  "/items/block_donation_translations": {
    /**
     * List Items
     * @description List the block_donation_translations items.
     */
    get: operations["readItemsBlockDonationTranslations"];
    /**
     * Create an Item
     * @description Create a new block_donation_translations item.
     */
    post: operations["createItemsBlockDonationTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_donation_translations items.
     */
    delete: operations["deleteItemsBlockDonationTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_donation_translations items at the same time.
     */
    patch: operations["updateItemsBlockDonationTranslations"];
  };
  "/items/block_donation_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_donation_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockDonationTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_donation_translations item.
     */
    delete: operations["deleteSingleItemsBlockDonationTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_donation_translations item.
     */
    patch: operations["updateSingleItemsBlockDonationTranslations"];
  };
  "/items/block_items_translations": {
    /**
     * List Items
     * @description List the block_items_translations items.
     */
    get: operations["readItemsBlockItemsTranslations"];
    /**
     * Create an Item
     * @description Create a new block_items_translations item.
     */
    post: operations["createItemsBlockItemsTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_items_translations items.
     */
    delete: operations["deleteItemsBlockItemsTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_items_translations items at the same time.
     */
    patch: operations["updateItemsBlockItemsTranslations"];
  };
  "/items/block_items_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_items_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockItemsTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_items_translations item.
     */
    delete: operations["deleteSingleItemsBlockItemsTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_items_translations item.
     */
    patch: operations["updateSingleItemsBlockItemsTranslations"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Diff: {
      hash?: string;
      diff?: {
        collections?: {
            collection?: string;
            diff?: Record<string, never>[];
          }[];
        fields?: {
            collection?: string;
            field?: string;
            diff?: Record<string, never>[];
          }[];
        relations?: {
            collection?: string;
            field?: string;
            related_collection?: string;
            diff?: Record<string, never>[];
          }[];
      };
    };
    Files: {
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * Format: date-time
       * @description When the file was created.
       * @example 2019-12-03T00:10:15+00:00
       */
      created_on?: string;
      modified_by?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on Exif data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on Exif data for images. */
      tags?: string[] | null;
      /** @description IPTC, Exif, and ICC metadata extracted from file */
      metadata?: Record<string, unknown> | null;
      focal_point_x?: number | null;
      focal_point_y?: number | null;
      tus_id?: string | null;
      tus_data?: unknown;
      /**
       * Format: date-time
       * @description When the file was last uploaded/replaced.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
      link?: string | null;
      copyright?: string | null;
    };
    Folders: {
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: string | components["schemas"]["Folders"] | null;
    };
    Roles: {
      /**
       * @description Unique identifier for the role.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description Name of the role.
       * @example Administrator
       */
      name?: string;
      /**
       * @description The role's icon.
       * @example verified_user
       */
      icon?: string;
      /**
       * @description Description of the role.
       * @example Admins have access to all managed data within the system by default
       */
      description?: string | null;
      /** @description $t:field_options.directus_roles.parent_note */
      parent?: string | components["schemas"]["Roles"] | null;
      /** @description $t:field_options.directus_roles.children_note */
      children?: ((string | components["schemas"]["Roles"])[]) | null;
      policies?: unknown;
      users?: ((string | components["schemas"]["Users"])[]) | null;
    };
    Schema: {
      /** @example 1 */
      version?: number;
      directus?: string;
      vendor?: string;
      collections?: components["schemas"]["Collections"][];
      fields?: components["schemas"]["Fields"][];
      relations?: components["schemas"]["Relations"][];
    };
    Users: {
      /**
       * @description Unique identifier for the user.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description First name of the user.
       * @example Admin
       */
      first_name?: string;
      /**
       * @description Last name of the user.
       * @example User
       */
      last_name?: string;
      /**
       * Format: email
       * @description Unique email address for the user.
       * @example admin@example.com
       */
      email?: string;
      /** @description Password of the user. */
      password?: string;
      /**
       * @description The user's location.
       * @example null
       */
      location?: string | null;
      /**
       * @description The user's title.
       * @example null
       */
      title?: string | null;
      /**
       * @description The user's description.
       * @example null
       */
      description?: string | null;
      /**
       * @description The user's tags.
       * @example null
       */
      tags?: string[] | null;
      /**
       * @description The user's avatar.
       * @example null
       */
      avatar?: string | components["schemas"]["Files"] | null;
      /**
       * @description The user's language used in Directus.
       * @example en-US
       */
      language?: string;
      /**
       * @description The 2FA secret string that's used to generate one time passwords.
       * @example null
       */
      tfa_secret?: string | null;
      /**
       * @description Status of the user.
       * @example active
       * @enum {string}
       */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /**
       * @description Unique identifier of the role of this user.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | components["schemas"]["Roles"];
      /** @description Static token for the user. */
      token?: string | null;
      /**
       * Format: date-time
       * @description When this user used the API last.
       * @example 2020-05-31T14:32:37Z
       */
      last_access?: string | null;
      /**
       * @description Last page that the user was on.
       * @example /my-project/settings/collections/a
       */
      last_page?: string | null;
      provider?: string;
      external_identifier?: string | null;
      auth_data?: unknown;
      email_notifications?: boolean | null;
      appearance?: string | null;
      theme_dark?: string | null;
      theme_light?: string | null;
      theme_light_overrides?: unknown;
      theme_dark_overrides?: unknown;
      policies?: unknown;
    };
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    Fields: {
      id?: number;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: unknown;
      display?: string | null;
      display_options?: unknown;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: unknown;
      note?: string | null;
      conditions?: unknown;
      required?: boolean | null;
      group?: number | components["schemas"]["Fields"] | null;
      validation?: unknown;
      validation_message?: string | null;
    };
    Collections: {
      /**
       * @description The collection key.
       * @example customers
       */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: unknown;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: unknown;
      sort?: number | null;
      group?: string | components["schemas"]["Collections"] | null;
      collapse?: string;
      preview_url?: string | null;
      versioning?: boolean;
    };
    Activity: {
      /**
       * @description Unique identifier for the object.
       * @example 2
       */
      id?: number;
      /**
       * @description Action that was performed.
       * @example update
       * @enum {string}
       */
      action?: "create" | "update" | "delete" | "login";
      /** @description The user who performed this action. */
      user?: string | components["schemas"]["Users"] | null;
      /**
       * Format: date-time
       * @description When the action happened.
       * @example 2019-12-05T22:52:09Z
       */
      timestamp?: string;
      /**
       * @description The IP address of the user at the time the action took place.
       * @example 127.0.0.1
       */
      ip?: string;
      /**
       * @description User agent string of the browser the user used when the action took place.
       * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
       */
      user_agent?: string;
      /** @description Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
       * @example 328
       */
      item?: string;
      /**
       * @description User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
       * @example null
       */
      comment?: string | null;
      /**
       * @description Origin of the request when the action took place.
       * @example https://directus.io
       */
      origin?: string;
      revisions?: ((number | components["schemas"]["Revisions"])[]) | null;
    };
    Presets: {
      /**
       * @description Unique identifier for this single collection preset.
       * @example 155
       */
      id?: number;
      /** @description Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /**
       * @description The unique identifier of the user to whom this collection preset applies.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user?: string | components["schemas"]["Users"] | null;
      /**
       * @description The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
       * @example 50419801-0f30-8644-2b3c-9bc2d980d0a0
       */
      role?: string | components["schemas"]["Roles"] | null;
      /**
       * @description What collection this collection preset is used for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /** @description Search query. */
      search?: string | null;
      /**
       * @description Key of the layout that is used.
       * @example null
       */
      layout?: string;
      /**
       * @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
       * @example {
       *   "cards": {
       *     "sort": "-published_on"
       *   }
       * }
       */
      layout_query?: unknown;
      /**
       * @description Options of the views. The properties in here are controlled by the layout.
       * @example {
       *   "cards": {
       *     "icon": "account_circle",
       *     "title": "{{ first_name }} {{ last_name }}",
       *     "subtitle": "{{ title }}",
       *     "size": 3
       *   }
       * }
       */
      layout_options?: unknown;
      refresh_interval?: number | null;
      filter?: unknown;
      icon?: string | null;
      color?: string | null;
    };
    Permissions: {
      /**
       * @description Unique identifier for the permission.
       * @example 1
       */
      id?: number;
      /**
       * @description What collection this permission applies to.
       * @example customers
       */
      collection?: string;
      /**
       * @description What action this permission applies to.
       * @example create
       * @enum {string}
       */
      action?: "create" | "read" | "update" | "delete";
      /** @description JSON structure containing the permissions checks for this permission. */
      permissions?: Record<string, unknown> | null;
      /** @description JSON structure containing the validation checks for this permission. */
      validation?: Record<string, unknown> | null;
      /** @description JSON structure containing the preset value for created/updated items. */
      presets?: Record<string, unknown> | null;
      /** @description CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
      policy?: unknown;
    };
    Revisions: {
      /**
       * @description Unique identifier for the revision.
       * @example 1
       */
      id?: number;
      /**
       * @description Unique identifier for the activity record.
       * @example 2
       */
      activity?: number | components["schemas"]["Activity"];
      /**
       * @description Collection of the updated item.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Primary key of updated item.
       * @example 168
       */
      item?: string;
      /**
       * @description Copy of item state at time of update.
       * @example {
       *   "author": 1,
       *   "body": "This is my first post",
       *   "featured_image": 15,
       *   "id": "168",
       *   "title": "Hello, World!"
       * }
       */
      data?: Record<string, unknown> | null;
      /**
       * @description Changes between the previous and the current revision.
       * @example {
       *   "title": "Hello, World!"
       * }
       */
      delta?: Record<string, never>;
      /**
       * @description If the current item was updated relationally, this is the id of the parent revision record
       * @example null
       */
      parent?: number | null;
      /**
       * @description Associated version of this revision.
       * @example draft
       */
      version?: string | components["schemas"]["Versions"];
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Webhooks: {
      /**
       * @description The index of the webhook.
       * @example 1
       */
      id?: number;
      /**
       * @description The name of the webhook.
       * @example create articles
       */
      name?: string;
      /**
       * @description Method used in the webhook.
       * @example POST
       */
      method?: string;
      /**
       * @description The url of the webhook.
       * @example null
       */
      url?: string | null;
      /**
       * @description The status of the webhook.
       * @example inactive
       */
      status?: string;
      /**
       * @description If yes, send the content of what was done
       * @example true
       */
      data?: boolean;
      /**
       * @description The actions that triggers this webhook.
       * @example null
       */
      actions?: string[] | null;
      collections?: string[];
      headers?: unknown;
      was_active_before_deprecation?: boolean;
      migrated_flow?: string | components["schemas"]["Flows"] | null;
    };
    Settings: {
      /**
       * @description Unique identifier for the setting.
       * @example 1
       */
      id?: number;
      /**
       * @description The name of the project.
       * @example Directus
       */
      project_name?: string;
      /**
       * @description The url of the project.
       * @example null
       */
      project_url?: string | null;
      /**
       * @description The brand color of the project.
       * @example null
       */
      project_color?: string | null;
      /**
       * @description The logo of the project.
       * @example null
       */
      project_logo?: string | null;
      /**
       * @description The foreground of the project.
       * @example null
       */
      public_foreground?: string | null;
      /**
       * @description The background of the project.
       * @example null
       */
      public_background?: {
        id?: string;
        type?: string;
      } | null;
      /**
       * @description Note rendered on the public pages of the app.
       * @example null
       */
      public_note?: string | null;
      /**
       * @description Allowed authentication login attempts before the user's status is set to blocked.
       * @example 25
       */
      auth_login_attempts?: number;
      /** @description Authentication password policy. */
      auth_password_policy?: string | null;
      /**
       * @description What transformations are allowed in the assets endpoint.
       * @example all
       * @enum {string|null}
       */
      storage_asset_transform?: "all" | "none" | "presets" | null;
      /**
       * @description Array of allowed
       * @example null
       */
      storage_asset_presets?: (({
          /** @description Key for the asset. Used in the assets endpoint. */
          key?: string;
          /**
           * @description Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
           * @enum {string}
           */
          fit?: "cover" | "contain" | "inside" | "outside";
          /** @description Width of the thumbnail. */
          width?: number;
          /** @description Height of the thumbnail. */
          height?: number;
          /** @description No image upscale */
          withoutEnlargement?: boolean;
          /** @description Quality of the compression used. */
          quality?: number;
          /**
           * @description Reformat output image
           * @enum {string}
           */
          format?: "" | "jpeg" | "png" | "webp" | "tiff" | "avif";
          /** @description Additional transformations to apply */
          transforms?: (({
              /** @description The Sharp method name */
              method?: string;
              /** @description A list of arguments to pass to the Sharp method */
              arguments?: {
                  /** @description A JSON representation of the argument value */
                  argument?: string;
                }[] | null;
            })[]) | null;
        })[]) | null;
      custom_css?: string | null;
      /**
       * Format: uuid
       * @description Default folder to place files
       */
      storage_default_folder?: string;
      basemaps?: unknown;
      mapbox_key?: string | null;
      module_bar?: unknown;
      project_descriptor?: string | null;
      default_language?: string;
      custom_aspect_ratios?: unknown;
      /** @description $t:field_options.directus_settings.project_favicon_note */
      public_favicon?: string | components["schemas"]["Files"] | null;
      default_appearance?: string;
      default_theme_light?: string | null;
      theme_light_overrides?: unknown;
      default_theme_dark?: string | null;
      theme_dark_overrides?: unknown;
      report_error_url?: string | null;
      report_bug_url?: string | null;
      report_feature_url?: string | null;
      /** @description $t:fields.directus_settings.public_registration_note */
      public_registration?: boolean;
      /** @description $t:fields.directus_settings.public_registration_verify_email_note */
      public_registration_verify_email?: boolean;
      /** @description $t:fields.directus_settings.public_registration_role_note */
      public_registration_role?: string | components["schemas"]["Roles"] | null;
      /** @description $t:fields.directus_settings.public_registration_email_filter_note */
      public_registration_email_filter?: unknown;
    };
    Flows: {
      /**
       * @description Unique identifier for the flow.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The name of the flow.
       * @example Update Articles Flow
       */
      name?: string;
      /**
       * @description Icon displayed in the Admin App for the flow.
       * @example bolt
       */
      icon?: string;
      /**
       * @description Color of the icon displayed in the Admin App for the flow.
       * @example #112233
       */
      color?: string | null;
      description?: string | null;
      /**
       * @description Current status of the flow.
       * @default active
       * @example active
       * @enum {string}
       */
      status?: "active" | "inactive";
      /**
       * @description Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
       * @example manual
       */
      trigger?: string;
      /**
       * @description The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
       * @example $trigger
       */
      accountability?: string;
      /**
       * @description Options of the selected trigger for the flow.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description UUID of the operation connected to the trigger in the flow.
       * @example 92e82998-e421-412f-a513-13701e83e4ce
       */
      operation?: string | components["schemas"]["Operations"];
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the flow was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description The user who created the flow.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      operations?: ((string | components["schemas"]["Operations"])[]) | null;
    };
    Operations: {
      /**
       * @description Unique identifier for the operation.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The name of the operation.
       * @example Log to Console
       */
      name?: string;
      /**
       * @description Key for the operation. Must be unique within a given flow.
       * @example log_console
       */
      key?: string;
      /**
       * @description Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
       * @example log
       */
      type?: string;
      /**
       * @description Position of the operation on the X axis within the flow workspace.
       * @example 12
       */
      position_x?: number;
      /**
       * @description Position of the operation on the Y axis within the flow workspace.
       * @example 12
       */
      position_y?: number;
      /**
       * @description Options depending on the type of the operation.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description The operation triggered when the current operation succeeds (or `then` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      resolve?: string | components["schemas"]["Operations"];
      /**
       * @description The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      reject?: string | components["schemas"]["Operations"];
      flow?: string | components["schemas"]["Flows"];
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the operation was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description The user who created the operation.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
    };
    Versions: {
      /**
       * @description Primary key of the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description Key of the Content Version, used as the value for the "version" query parameter.
       * @example draft
       */
      key?: string;
      /**
       * @description Descriptive name of the Content Version.
       * @example My Draft
       */
      name?: string;
      /**
       * @description Name of the collection the Content Version is created on.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description The item the Content Version is created on.
       * @example 168
       */
      item?: string;
      hash?: string | null;
      /**
       * Format: date-time
       * @description When the Content Version was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * Format: date-time
       * @description When the Content Version was updated.
       * @example 2022-05-11T13:14:53Z
       */
      date_updated?: string | null;
      /**
       * @description User that created the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      /**
       * @description User that updated the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_updated?: string | components["schemas"]["Users"];
    };
    ItemsDeDwdData: {
      id?: number;
      /** Format: date */
      date?: string | null;
      /** Format: float */
      tlmin?: number | null;
      /** Format: float */
      tlmax?: number | null;
      /** Format: float */
      tl_mittel?: number | null;
      /** Format: float */
      sh?: number | null;
      station?: string | components["schemas"]["ItemsDeDwdStations"] | null;
    };
    ItemsDeDwdStations: {
      id?: string;
      name?: string | null;
      station?: string | null;
      /** Format: float */
      latitude?: number | null;
      /** Format: float */
      longitude?: number | null;
      /** Format: float */
      height?: number | null;
      state?: string | null;
      /** Format: date */
      date_start?: string | null;
      /** Format: float */
      snow_coverage?: number | null;
    };
    ItemsRenewableShare15min: {
      id?: number;
      /** Format: float */
      share?: number | null;
      country?: string | components["schemas"]["ItemsCountries"] | null;
      /** Format: date-time */
      time?: string | null;
    };
    ItemsBlockToggle: {
      /** Format: uuid */
      id?: string;
      question?: string | null;
      answer?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockToggleTranslations"])[]) | null;
    };
    ItemsBlockDonation: {
      /** Format: uuid */
      id?: string;
      title?: string | null;
      text?: string | null;
      values?: unknown;
      translations?: ((number | components["schemas"]["ItemsBlockDonationTranslations"])[]) | null;
    };
    ItemsBlockQuiz: {
      /** Format: uuid */
      id?: string;
    };
    ItemsPages: {
      /** Format: uuid */
      id?: string;
      status?: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      site?: string | components["schemas"]["ItemsSites"] | null;
      translations?: ((number | components["schemas"]["ItemsPagesTranslations"])[]) | null;
      blocks?: ((number | components["schemas"]["ItemsPagesBlocks"])[]) | null;
    };
    ItemsCharts: {
      /** Format: uuid */
      id?: string;
      status?: string;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      type?: string | null;
      custom_sveltestring?: string | null;
      id_old?: string | null;
      site?: string | components["schemas"]["ItemsSites"] | null;
      table_name?: string | null;
      x_axis?: string | null;
      layers?: unknown;
      options?: unknown;
      x_axis_name?: string | null;
      translations?: ((number | components["schemas"]["ItemsChartsTranslations"])[]) | null;
    };
    ItemsNews: {
      id?: number;
      status?: string;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      slack_message_id?: string | null;
      author?: string | components["schemas"]["Users"] | null;
      sites?: string[] | null;
      translations?: ((number | components["schemas"]["ItemsNewsTranslations"])[]) | null;
    };
    ItemsDatasets: {
      id?: number;
    };
    ItemsSEO: {
      /** Format: uuid */
      id?: string;
      title?: string | null;
      meta_description?: string | null;
      og_image?: string | components["schemas"]["Files"] | null;
    };
    ItemsCountries: {
      id?: string;
      name_de?: string | null;
      population?: number | null;
      area?: number | null;
      latitude?: string | null;
      longitude?: string | null;
      name?: string | null;
    };
    ItemsBlockChart: {
      /** Format: uuid */
      id?: string;
      hidewrapper?: boolean | null;
      charts?: ((number | components["schemas"]["ItemsBlockChartCharts"])[]) | null;
    };
    ItemsAtGeosphereData: {
      id?: number;
      /** Format: float */
      tlmin?: number | null;
      /** Format: float */
      tlmax?: number | null;
      /** Format: float */
      tl_mittel?: number | null;
      station?: string | components["schemas"]["ItemsAtGeosphereStations"] | null;
      /** Format: date */
      date?: string | null;
      /** Format: float */
      sh?: number | null;
    };
    ItemsAtGeosphereStations: {
      id?: string;
      name?: string | null;
      station?: string | null;
      /** Format: float */
      latitude?: number | null;
      /** Format: float */
      longitude?: number | null;
      /** Format: float */
      height?: number | null;
      /** Format: date */
      start?: string | null;
      state?: string | null;
      /** Format: float */
      snow_coverage?: number | null;
    };
    ItemsPagesTranslations: {
      id?: number;
      pages_id?: string | components["schemas"]["ItemsPages"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      slug?: string | null;
      heading?: string | null;
      tags?: unknown;
      description?: string | null;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      blocks?: ((number | components["schemas"]["ItemsPagesTranslationsBlocks"])[]) | null;
    };
    ItemsBlockRichtext: {
      /** Format: uuid */
      id?: string;
      content?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockRichtextTranslations"])[]) | null;
    };
    ItemsBlockChartCharts: {
      id?: number;
      block?: string | components["schemas"]["ItemsBlockChart"] | null;
      chart?: string | components["schemas"]["ItemsCharts"] | null;
    };
    ItemsLanguages: {
      code?: string;
      name?: string | null;
      direction?: string | null;
    };
    ItemsDeWindPowerPlants: {
      id?: string;
    };
    ItemsUnitsSolar: {
      id?: number;
      /** Format: timestamp */
      date_updated?: string | null;
      year?: number | null;
      region?: string | null;
      unit?: string | null;
      variable?: string | null;
      value?: string | null;
    };
    ItemsBlockQuotes: {
      /** Format: uuid */
      id?: string;
    };
    ItemsQuotes: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      author_image?: string | components["schemas"]["Files"] | null;
      author_name?: string | null;
      author_image_copyright?: string | null;
      author_role?: string | null;
      text?: string | null;
    };
    ItemsTestDataset: {
      id?: number;
      test?: string | null;
    };
    ItemsRegions: {
      /** Format: uuid */
      id?: string;
      code?: string | null;
      name?: string | null;
      country?: string | components["schemas"]["ItemsCountries"] | null;
      area?: number | null;
      population?: number | null;
      layer?: string | null;
      postcodes?: string[] | null;
      center?: string[] | null;
      attributes?: unknown;
    };
    ItemsMastrSolar: {
      id?: number;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
    };
    ItemsPagesTranslationsBlocks: {
      id?: number;
      pages_translations_id?: number | components["schemas"]["ItemsPagesTranslations"] | null;
      item?: ((string | components["schemas"]["ItemsBlockToggle"] | components["schemas"]["ItemsBlockDonation"] | components["schemas"]["ItemsBlockQuiz"] | components["schemas"]["ItemsBlockChart"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockQuotes"] | components["schemas"]["ItemsBlockItems"] | components["schemas"]["ItemsBlockTeaser"] | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockGrid"])[]) | null;
      sort?: number | null;
      collection?: string | null;
    };
    ItemsRenewableShareDaily: {
      id?: number;
      /** Format: float */
      share?: number | null;
      /** Format: date */
      date?: string | null;
      country?: string | components["schemas"]["ItemsCountries"] | null;
    };
    Extensions: {
      enabled?: boolean;
      /** Format: uuid */
      id?: string;
      folder?: string;
      source?: string;
      /**
       * @description Name of the bundle the extension is in.
       * @example directus-extension-my-bundle
       */
      bundle?: string | null;
    };
    ItemsCarbonPrices: {
      id?: number;
      /** Format: date-time */
      date?: string | null;
      /** Format: float */
      value?: number | null;
      unit?: string | null;
      region?: string | null;
      type?: string | null;
    };
    ItemsGlobalCo2Concentration: {
      id?: number;
      year?: number | null;
      /** Format: float */
      mean?: number | null;
    };
    ItemsBlockItems: {
      /** Format: uuid */
      id?: string;
      types?: unknown;
      tags?: unknown;
      title?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockItemsTranslations"])[]) | null;
    };
    ItemsBlockTeaser: {
      /** Format: uuid */
      id?: string;
      eyebrow?: string | null;
      title?: string | null;
      description?: string | null;
      type?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      link?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockTeaserTranslations"])[]) | null;
    };
    ItemsCompaniesCompaniesSectors: {
      id?: number;
      companies_id?: string | components["schemas"]["ItemsCompanies"] | null;
      companies_sectors_id?: string | components["schemas"]["ItemsCompaniesSectors"] | null;
    };
    ItemsSites: {
      id?: string;
      domain?: string | null;
      translations?: ((number | components["schemas"]["ItemsSitesTranslations"])[]) | null;
    };
    ItemsCompaniesSectors: {
      /** Format: uuid */
      id?: string;
      name?: string | null;
      icon?: string | components["schemas"]["Files"] | null;
    };
    ItemsChartsTranslations: {
      id?: number;
      charts_id?: string | components["schemas"]["ItemsCharts"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      heading?: string | null;
      text?: string | null;
      source?: string | null;
      methods?: string | null;
      variables?: unknown;
      tags?: unknown;
    };
    ItemsQuizQuestions: {
      /** Format: uuid */
      id?: string;
      status?: string;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      question?: string | null;
      text_question?: string | null;
      text_answer?: string | null;
      countries?: unknown;
      answers?: ((string | components["schemas"]["ItemsQuizAnswers"])[]) | null;
    };
    ItemsCompanies: {
      /** Format: uuid */
      id?: string;
      status?: string;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      name?: string | null;
      logo?: string | components["schemas"]["Files"] | null;
      intermediate_goal?: boolean | null;
      member_sbt?: boolean | null;
      climate_neutrality_scopes?: unknown;
      climate_neutrality_goal?: string | null;
      sectors?: ((number | components["schemas"]["ItemsCompaniesCompaniesSectors"])[]) | null;
    };
    ItemsBlockGallery: {
      /** Format: uuid */
      id?: string;
      title?: string | null;
      files?: ((number | components["schemas"]["ItemsBlockGalleryFiles"])[]) | null;
    };
    ItemsQuizAnswers: {
      /** Format: uuid */
      id?: string;
      question_id?: string | components["schemas"]["ItemsQuizQuestions"] | null;
      label?: string | null;
      text?: string | null;
      is_true?: boolean | null;
      answer_order?: number | null;
      answer_count?: number | null;
    };
    ItemsGlossaryTranslations: {
      id?: number;
      glossary_id?: string | components["schemas"]["ItemsGlossary"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      text?: string | null;
    };
    ItemsBlockGrid: {
      /** Format: uuid */
      id?: string;
      blocks?: ((number | components["schemas"]["ItemsBlockGridBlocks"])[]) | null;
    };
    ItemsEmissions: {
      id?: number;
      region?: string | null;
      period?: string | null;
      source?: string | null;
      category?: string | null;
      unit?: string | null;
      /** Format: float */
      value?: number | null;
      /** Format: date-time */
      update?: string | null;
      note?: string | null;
    };
    ItemsBlockGalleryFiles: {
      id?: number;
      block_gallery_id?: string | components["schemas"]["ItemsBlockGallery"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsEnergy: {
      id?: number;
      period?: string | null;
      region?: string | null;
      /** Format: float */
      value?: number | null;
      unit?: string | null;
      source?: string | null;
      category?: string | null;
      /** Format: date-time */
      update?: string | null;
      note?: string | null;
      period_x?: string | null;
    };
    ItemsGlossary: {
      /** Format: uuid */
      id?: string;
      status?: string;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      key?: string | null;
      translations?: ((number | components["schemas"]["ItemsGlossaryTranslations"])[]) | null;
    };
    ItemsCompaniesEmissions: {
      /** Format: uuid */
      id?: string;
      company?: string | null;
      year?: number | null;
      scope?: number | null;
      /** Format: int64 */
      value?: number | null;
      category?: string | null;
      source?: string | null;
      notes?: string | null;
      source_link?: string | null;
    };
    ItemsEnergyRenewableShare: {
      id?: number;
      /** Format: date-time */
      period?: string | null;
      /** Format: float */
      value?: number | null;
      category?: string | null;
      country?: string | components["schemas"]["ItemsCountries"] | null;
      note?: string | null;
    };
    ItemsBlockPanel: {
      id?: number;
      title?: string | null;
      colorBackground?: string | null;
      colorText?: string | null;
      icon?: string | null;
      unit?: string | null;
      number?: string | null;
      subtitle?: string | null;
      list?: unknown;
      link?: string | null;
      chart?: string | components["schemas"]["ItemsCharts"] | null;
      source?: string | null;
      chart_custom?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockPanelTranslations"])[]) | null;
    };
    ItemsBlockNews: {
      id?: number;
    };
    ItemsBlockGridBlocks: {
      id?: number;
      block_grid_id?: string | components["schemas"]["ItemsBlockGrid"] | null;
      item?: ((string | components["schemas"]["ItemsBlockDonation"] | components["schemas"]["ItemsBlockQuiz"] | components["schemas"]["ItemsBlockChart"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockTeaser"] | components["schemas"]["ItemsBlockPanel"] | components["schemas"]["ItemsBlockNews"])[]) | null;
      sort?: number | null;
      collection?: string | null;
      width?: string | null;
      height?: string | null;
    };
    ItemsSitesTranslations: {
      id?: number;
      sites_id?: string | components["schemas"]["ItemsSites"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      popular_pages?: unknown;
      title?: string | null;
      navigation_primary?: unknown;
      navigation_secondary?: unknown;
      faq?: unknown;
    };
    ItemsNewsTranslations: {
      id?: number;
      news_id?: number | components["schemas"]["ItemsNews"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      text?: string | null;
    };
    ItemsPagesBlocks: {
      id?: number;
      pages_id?: string | components["schemas"]["ItemsPages"] | null;
      item?: ((string | components["schemas"]["ItemsBlockToggle"] | components["schemas"]["ItemsBlockDonation"] | components["schemas"]["ItemsBlockQuiz"] | components["schemas"]["ItemsBlockChart"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockQuotes"] | components["schemas"]["ItemsBlockItems"] | components["schemas"]["ItemsBlockTeaser"] | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockGrid"] | components["schemas"]["ItemsBlockPanel"] | components["schemas"]["ItemsBlockNews"])[]) | null;
      sort?: number | null;
      collection?: string | null;
    };
    ItemsBlockTeaserTranslations: {
      id?: number;
      block_teaser_id?: string | components["schemas"]["ItemsBlockTeaser"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      eyebrow?: string | null;
      title?: string | null;
      description?: string | null;
    };
    ItemsBlockRichtextTranslations: {
      id?: number;
      block_richtext_id?: string | components["schemas"]["ItemsBlockRichtext"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      content?: string | null;
    };
    ItemsBlockToggleTranslations: {
      id?: number;
      block_toggle_id?: string | components["schemas"]["ItemsBlockToggle"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      question?: string | null;
      answer?: string | null;
    };
    ItemsBlockPanelTranslations: {
      id?: number;
      block_panel_id?: number | components["schemas"]["ItemsBlockPanel"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      subtitle?: string | null;
      source?: string | null;
      list?: unknown;
    };
    ItemsBlockDonationTranslations: {
      id?: number;
      block_donation_id?: string | components["schemas"]["ItemsBlockDonation"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      text?: string | null;
    };
    ItemsBlockItemsTranslations: {
      id?: number;
      block_items_id?: string | components["schemas"]["ItemsBlockItems"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string;
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
          /** @description The user's one-time-password (if MFA is enabled). */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Snapshot
   * @description Retrieve the current schema. This endpoint is only available to admin users.
   */
  schemaSnapshot: {
    parameters: {
      query?: {
        export?: components["parameters"]["Export"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Schema"];
          };
          "text/yaml": string;
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Apply Schema Difference
   * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
   */
  schemaApply: {
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Diff"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Difference
   * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
   */
  schemaDiff: {
    parameters: {
      query?: {
        /** @description Bypass version and database vendor restrictions. */
        force?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Schema"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Diff"];
          };
        };
      };
      /** @description No schema difference. */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-generate": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-verify": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
          /** @description Hash you want to verify against. */
          hash: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example true */
            data?: boolean;
          };
        };
      };
    };
  };
  /**
   * Sort Items
   * @description Re-sort items in collection based on start and to value of item
   */
  sort: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Primary key of item to move */
          item?: number;
          /** @description Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Items
   * @description Import multiple records from a JSON or CSV file into a collection.
   */
  import: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Export Items
   * @description Export a larger data set to a file in the File Library
   */
  export: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What file format to save the export to. One of csv, xml, json
           * @enum {string}
           */
          format: "csv" | "xml" | "json";
          query: components["schemas"]["Query"];
          file: components["schemas"]["Files"];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Clear Cache
   * @description Resets both the data and schema cache of Directus.
   */
  "clear-cache": {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a Random String
   * @description Returns a random string of given length.
   */
  random: {
    parameters: {
      query?: {
        /** @description Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example 1>M3+4oh.S */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * List All Fields
   * @description Returns a list of the fields available in the project.
   */
  getFields: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Fields in Collection
   * @description Returns a list of the fields available in the given collection.
   */
  getCollectionFields: {
    parameters: {
      query?: {
        sort?: components["parameters"]["Sort"];
      };
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Field in Collection
   * @description Create a new field in a given collection.
   */
  createField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Field
   * @description Retrieves the details of a single field in a given collection.
   */
  getCollectionField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Field
   * @description Delete an existing field.
   */
  deleteField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Field
   * @description Update an existing field.
   */
  updateField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field?: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type?: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Collections
   * @description Returns a list of the collections available in the project.
   */
  getCollections: {
    parameters: {
      query?: {
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Collection
   * @description Create a new collection in Directus.
   */
  createCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the collection.
           * @example my_collection
           */
          collection: string;
          /** @description The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
          fields: Record<string, never>[];
          /**
           * @description Name of a Google Material Design Icon that's assigned to this collection.
           * @example people
           */
          icon?: string | null;
          /**
           * @description A note describing the collection.
           * @example null
           */
          note?: string | null;
          /**
           * @description Text representation of how items from this collection are shown across the system.
           * @example null
           */
          display_template?: string | null;
          /**
           * @description Whether or not the collection is hidden from the navigation in the admin app.
           * @example false
           */
          hidden?: boolean;
          /**
           * @description Whether or not the collection is treated as a single object.
           * @example false
           */
          singleton?: boolean;
          /**
           * @description Key value pairs of how to show this collection's name in different languages in the admin app.
           * @example null
           */
          translation?: string | null;
          /**
           * @description Whether or not Content Versioning is enabled for this collection.
           * @example false
           */
          versioning?: boolean;
          /**
           * @description What field holds the archive value.
           * @example null
           */
          archive_field?: string | null;
          /**
           * @description What value to use for "archived" items.
           * @example null
           */
          archive_app_filter?: string | null;
          /**
           * @description What value to use to "unarchive" items.
           * @example null
           */
          archive_value?: string | null;
          /**
           * @description Whether or not to show the "archived" filter.
           * @example null
           */
          unarchive_value?: string | null;
          /**
           * @description The sort field in the collection.
           * @example null
           */
          sort_field?: string | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Collection
   * @description Retrieves the details of a single collection.
   */
  getCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Collection
   * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
   */
  deleteCollection: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Collection
   * @description Update an existing collection.
   */
  updateCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Metadata of the collection. */
          meta?: {
            /**
             * @description Name of a Google Material Design Icon that's assigned to this collection.
             * @example people
             */
            icon?: string | null;
            /**
             * @description Choose the color for the icon assigned to this collection.
             * @example #6644ff
             */
            color?: string | null;
            /**
             * @description A note describing the collection.
             * @example null
             */
            note?: string | null;
            /**
             * @description Text representation of how items from this collection are shown across the system.
             * @example null
             */
            display_template?: string | null;
            /**
             * @description Whether or not the collection is hidden from the navigation in the admin app.
             * @example false
             */
            hidden?: boolean;
            /**
             * @description Whether or not the collection is treated as a single object.
             * @example false
             */
            singleton?: boolean;
            /**
             * @description Key value pairs of how to show this collection's name in different languages in the admin app.
             * @example null
             */
            translation?: string | null;
            /**
             * @description Whether or not Content Versioning is enabled for this collection.
             * @example false
             */
            versioning?: boolean;
            /**
             * @description What field holds the archive value.
             * @example null
             */
            archive_field?: string | null;
            /**
             * @description What value to use for "archived" items.
             * @example null
             */
            archive_app_filter?: string | null;
            /**
             * @description What value to use to "unarchive" items.
             * @example null
             */
            archive_value?: string | null;
            /**
             * @description Whether or not to show the "archived" filter.
             * @example null
             */
            unarchive_value?: string | null;
            /**
             * @description The sort field in the collection.
             * @example null
             */
            sort_field?: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Activity Actions
   * @description Returns a list of activity actions.
   */
  getActivities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Comment
   * @description Creates a new comment.
   */
  createComment: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example projects */
          collection: string;
          /** @example 1 */
          item: number;
          /** @example A new comment */
          comment: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve an Activity Action
   * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
   */
  getActivity: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Comment
   * @description Delete an existing comment. Deleted comments can not be retrieved.
   */
  deleteComment: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Deleted successfully */
      203: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Comment
   * @description Update the content of an existing comment.
   */
  updateComment: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example My updated comment */
          comment?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Folders
   * @description List the folders.
   */
  getFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Folder
   * @description Create a new folder.
   */
  createFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Name of the folder.
           * @example Amsterdam
           */
          name: string;
          /** @description Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Folders
   * @description Delete multiple existing folders.
   */
  deleteFolders: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Folders
   * @description Update multiple folders at the same time.
   */
  updateFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description Name of the folder.
             * @example Amsterdam
             */
            name: string;
            /** @description Unique identifier of the parent folder. This allows for nested folders. */
            parent?: number;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Folder
   * @description Retrieve a single folder by unique identifier.
   */
  getFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Folder
   * @description Delete an existing folder
   */
  deleteFolder: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Folder
   * @description Update an existing folder
   */
  updateFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Name of the folder. Can't be null or empty. */
          name?: string;
          /**
           * @description Unique identifier of the parent folder. This allows for nested folders.
           * @example 3
           */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Presets
   * @description List the presets.
   */
  getPresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        page?: components["parameters"]["Page"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a Preset
   * @description Create a new preset.
   */
  createPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /**
           * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
           * @example null
           */
          role?: string;
          /** @description What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
              /** @example aHKLAakdVghzD */
              key?: string;
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. */
          layout?: string;
          /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Presets
   * @description Delete multiple existing presets.
   */
  deletePresets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Presets
   * @description Update multiple presets at the same time.
   */
  updatePresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this collection preset is used for.
             * @example articles
             */
            collection: string;
            /**
             * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
             * @example Highly rated articles
             */
            title?: string;
            /**
             * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
             * @example null
             */
            role?: string;
            /** @description What the user searched for in search/filter in the header bar. */
            search?: string;
            filters?: {
                /** @example aHKLAakdVghzD */
                key?: string;
                /** @example rating */
                field?: string;
                /** @example gte */
                operator?: string;
                /** @example 4.5 */
                value?: number;
              }[];
            /** @description Name of the view type that is used. */
            layout?: string;
            /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
            layout_query?: string;
            /** @description Options of the views. The properties in here are controlled by the layout. */
            layout_options?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Preset
   * @description Retrieve a single preset by unique identifier.
   */
  getPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a Preset
   * @description Delete an existing preset.
   */
  deletePreset: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a Preset
   * @description Update an existing preset.
   */
  updatePreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /** @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** @description What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** @description View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** @description Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Users
   * @description List the users.
   */
  getUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a User
   * @description Create a new user.
   */
  createUser: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Users
   * @description Delete multiple existing users.
   */
  deleteUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Users
   * @description Update multiple users at the same time.
   */
  updateUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Users"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a User
   * @description Retrieve a single user by unique identifier.
   */
  getUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a User
   * @description Delete an existing user
   */
  deleteUser: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a User
   * @description Update an existing user
   */
  updateUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Invite User(s)
   * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
   */
  invite: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Email address or array of email addresses of the to-be-invited user(s). */
          email?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Accept User Invite
   * @description Accepts and enables an invited user using a JWT invitation token.
   */
  acceptInvite: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Accept invite token.
           * @example eyJh...KmUk
           */
          token?: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example d1r3ctu5
           */
          password?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Current User
   * @description Retrieve the currently authenticated user.
   */
  getMe: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Current User
   * @description Update the currently authenticated user.
   */
  updateMe: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Last Page
   * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
   */
  updateLastUsedPageMe: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Path of the page you used last. */
          last_page?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Enable 2FA
   * @description Enables two-factor authentication for the currently authenticated user.
   */
  meTfaEnable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Disable 2FA
   * @description Disables two-factor authentication for the currently authenticated user.
   */
  meTfaDisable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a File
   * @description Create a new file
   */
  createFile: {
    requestBody?: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Files
   * @description Delete multiple existing files.
   */
  deleteFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Files
   * @description Update multiple files at the same time.
   */
  updateFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            data?: string;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a File
   * @description Delete an existing file.
   */
  deleteFile: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a File
   * @description Update an existing file, and/or replace it's file contents.
   */
  updateFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "multipart/data": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
          /**
           * Format: binary
           * @description File contents.
           */
          file: unknown;
        };
        "application/json": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Roles
   * @description List the roles.
   */
  getRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Role
   * @description Create a new role.
   */
  createRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /**
           * @description Name of the role.
           * @example Interns
           */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Roles
   * @description Delete multiple existing roles.
   */
  deleteRoles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Roles
   * @description Update multiple roles at the same time.
   */
  updateRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /** @description Description of the role. */
            description?: string;
            /** @description Whether or not this role enforces the use of 2FA. */
            enforce_tfa?: boolean;
            /** @description ID used with external services in SCIM. */
            external_id?: string;
            /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
            ip_access?: string[];
            /** @description Custom override for the admin app module bar navigation. */
            module_listing?: string;
            /**
             * @description Name of the role.
             * @example Interns
             */
            name?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Role
   * @description Retrieve a single role by unique identifier.
   */
  getRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Role
   * @description Delete an existing role
   */
  deleteRole: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Role
   * @description Update an existing role
   */
  updateRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** @description Name of the role. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Permissions
   * @description List all permissions.
   */
  getPermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Permission
   * @description Create a new permission.
   */
  createPermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this permission applies to.
           * @example customers
           */
          collection?: string;
          /**
           * @description If the user can post comments.
           * @enum {string}
           */
          comment?: "none" | "create" | "update" | "full";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /**
           * @description Unique identifier of the role this permission applies to.
           * @example 3
           */
          role?: number;
          /**
           * @description Explicitly denies read access for specific fields.
           * @example [
           *   "featured_image"
           * ]
           */
          read_field_blacklist?: string[];
          /** @description What status this permission applies to. */
          status?: string;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: string[];
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Permissions
   * @description Delete multiple existing permissions.
   */
  deletePermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Permissions
   * @description Update multiple permissions at the same time.
   */
  updatePermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this permission applies to.
             * @example customers
             */
            collection?: string;
            /**
             * @description If the user can post comments.
             * @enum {string}
             */
            comment?: "none" | "create" | "update" | "full";
            /**
             * @description If the user can create items.
             * @enum {string}
             */
            create?: "none" | "full";
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            delete?: "none" | "mine" | "role" | "full";
            /**
             * @description If the user is required to leave a comment explaining what was changed.
             * @enum {string}
             */
            explain?: "none" | "create" | "update" | "always";
            /**
             * @description If the user can read items.
             * @enum {string}
             */
            read?: "none" | "mine" | "role" | "full";
            /**
             * @description Unique identifier of the role this permission applies to.
             * @example 3
             */
            role?: number;
            /**
             * @description Explicitly denies read access for specific fields.
             * @example [
             *   "featured_image"
             * ]
             */
            read_field_blacklist?: string[];
            /** @description What status this permission applies to. */
            status?: string;
            /** @description Explicitly denies specific statuses to be used. */
            status_blacklist?: string[];
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            update?: "none" | "mine" | "role" | "full";
            /** @description Explicitly denies write access for specific fields. */
            write_field_blacklist?: string[];
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List My Permissions
   * @description List the permissions that apply to the current user.
   */
  getMyPermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Permission
   * @description Retrieve a single permissions object by unique identifier.
   */
  getPermission: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Permission
   * @description Delete an existing permission
   */
  deletePermission: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Permission
   * @description Update an existing permission
   */
  updatePermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description What collection this permission applies to. */
          collection?: Record<string, never>;
          /**
           * @description If the user can post comments. `full`.
           * @enum {string}
           */
          comment?: "none" | "create" | "update";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies read access for specific fields. */
          read_field_blacklist?: Record<string, never>;
          /** @description Unique identifier of the role this permission applies to. */
          role?: Record<string, never>;
          /** @description What status this permission applies to. */
          status?: Record<string, never>;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: Record<string, never>;
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Revisions
   * @description List the revisions.
   */
  getRevisions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Revision
   * @description Retrieve a single revision by unique identifier.
   */
  getRevision: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Relations
   * @description List the relations.
   */
  getRelations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Relation
   * @description Create a new relation.
   */
  createRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Collection that has the field that holds the foreign key.
           * @example articles
           */
          collection_many?: string;
          /**
           * @description Collection on the _one_ side of the relationship.
           * @example authors
           */
          collection_one?: string;
          /**
           * @description Foreign key. Field that holds the primary key of the related collection.
           * @example author
           */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Relation
   * @description Retrieve a single relation by unique identifier.
   */
  getRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Relation
   * @description Delete an existing relation.
   */
  deleteRelation: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Relation
   * @description Update an existing relation
   */
  updateRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** @description Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** @description Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Webhooks
   * @description Get all webhooks.
   */
  getWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Webhook
   * @description Create a new webhook.
   */
  createWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Webhooks
   * @description Delete multiple existing webhooks.
   */
  deleteWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Webhooks
   * @description Update multiple webhooks at the same time.
   */
  updateWebhooks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The name of the webhook.
             * @example create articles
             */
            name?: string;
            /**
             * @description Method used in the webhook.
             * @example POST
             */
            method?: string;
            /**
             * @description The url of the webhook.
             * @example null
             */
            url?: string;
            /**
             * @description The status of the webhook.
             * @example active
             */
            status?: string;
            /**
             * @description If yes, send the content of what was done
             * @example true
             */
            data?: boolean;
            /**
             * @description The actions that triggers this webhook.
             * @example null
             */
            actions?: unknown;
            /**
             * @description The collections that triggers this webhook.
             * @example null
             */
            "system-collections"?: unknown;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Webhook
   * @description Retrieve a single webhook by unique identifier.
   */
  getWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Webhook
   * @description Delete an existing webhook
   */
  deleteWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Webhook
   * @description Update an existing webhook
   */
  updateWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Settings
   * @description List the settings.
   */
  getSettings: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Settings
   * @description Update the settings
   */
  updateSetting: {
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Flows
   * @description Get all flows.
   */
  getFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Flow
   * @description Create a new flow.
   */
  createFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Flows
   * @description Delete multiple existing flows.
   */
  deleteFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Flows
   * @description Update multiple flows at the same time.
   */
  updateFlows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Flows"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Flow
   * @description Retrieve a single flow by unique identifier.
   */
  getFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Flow
   * @description Delete an existing flow
   */
  deleteFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Flow
   * @description Update an existing flow
   */
  updateFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Operations
   * @description Get all operations.
   */
  getOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create an Operation
   * @description Create a new operation.
   */
  createOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Operations
   * @description Delete multiple existing operations.
   */
  deleteOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Operations
   * @description Update multiple operations at the same time.
   */
  updateOperations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Operations"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Operation
   * @description Retrieve a single operation by unique identifier.
   */
  getOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Operation
   * @description Delete an existing operation
   */
  deleteOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Operation
   * @description Update an existing operation
   */
  updateOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Content Versions
   * @description Get all Content Versions.
   */
  getContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Multiple Content Versions
   * @description Create multiple new Content Versions.
   */
  createContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Content Versions
   * @description Delete multiple existing Content Versions.
   */
  deleteContentVersions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Content Versions
   * @description Update multiple Content Versions at the same time.
   */
  updateContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Versions"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Content Version
   * @description Retrieve a single Content Version by unique identifier.
   */
  getContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Content Version
   * @description Delete an existing Content Version.
   */
  deleteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Content Version
   * @description Update an existing Content Version.
   */
  updateContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Save to a Content Version
   * @description Save item changes to an existing Content Version.
   */
  saveContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Compare a Content Version
   * @description Compare an existing Content Version with the main version of the item.
   */
  compareContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Promote a Content Version
   * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
   */
  promoteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Hash of the main version of the item to be promoted. */
          mainHash?: string;
          /** @description Optional array of field names of which the values are to be promoted. */
          fields?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the de_dwd_data items.
   */
  readItemsDeDwdData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdData"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new de_dwd_data item.
   */
  createItemsDeDwdData: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdData"][] | components["schemas"]["ItemsDeDwdData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing de_dwd_data items.
   */
  deleteItemsDeDwdData: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple de_dwd_data items at the same time.
   */
  updateItemsDeDwdData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdData"][] | components["schemas"]["ItemsDeDwdData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single de_dwd_data item by unique identifier.
   */
  readSingleItemsDeDwdData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdData"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing de_dwd_data item.
   */
  deleteSingleItemsDeDwdData: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing de_dwd_data item.
   */
  updateSingleItemsDeDwdData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdData"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the de_dwd_stations items.
   */
  readItemsDeDwdStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdStations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new de_dwd_stations item.
   */
  createItemsDeDwdStations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdStations"][] | components["schemas"]["ItemsDeDwdStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing de_dwd_stations items.
   */
  deleteItemsDeDwdStations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple de_dwd_stations items at the same time.
   */
  updateItemsDeDwdStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdStations"][] | components["schemas"]["ItemsDeDwdStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single de_dwd_stations item by unique identifier.
   */
  readSingleItemsDeDwdStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdStations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing de_dwd_stations item.
   */
  deleteSingleItemsDeDwdStations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing de_dwd_stations item.
   */
  updateSingleItemsDeDwdStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeDwdStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeDwdStations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the renewable_share_15min items.
   */
  readItemsRenewableShare15min: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShare15min"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new renewable_share_15min item.
   */
  createItemsRenewableShare15min: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShare15min"][] | components["schemas"]["ItemsRenewableShare15min"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing renewable_share_15min items.
   */
  deleteItemsRenewableShare15min: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple renewable_share_15min items at the same time.
   */
  updateItemsRenewableShare15min: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShare15min"][] | components["schemas"]["ItemsRenewableShare15min"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single renewable_share_15min item by unique identifier.
   */
  readSingleItemsRenewableShare15min: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShare15min"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing renewable_share_15min item.
   */
  deleteSingleItemsRenewableShare15min: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing renewable_share_15min item.
   */
  updateSingleItemsRenewableShare15min: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShare15min"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShare15min"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_toggle items.
   */
  readItemsBlockToggle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggle"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_toggle item.
   */
  createItemsBlockToggle: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggle"][] | components["schemas"]["ItemsBlockToggle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_toggle items.
   */
  deleteItemsBlockToggle: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_toggle items at the same time.
   */
  updateItemsBlockToggle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggle"][] | components["schemas"]["ItemsBlockToggle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_toggle item by unique identifier.
   */
  readSingleItemsBlockToggle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_toggle item.
   */
  deleteSingleItemsBlockToggle: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_toggle item.
   */
  updateSingleItemsBlockToggle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_donation items.
   */
  readItemsBlockDonation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonation"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_donation item.
   */
  createItemsBlockDonation: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonation"][] | components["schemas"]["ItemsBlockDonation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_donation items.
   */
  deleteItemsBlockDonation: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_donation items at the same time.
   */
  updateItemsBlockDonation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonation"][] | components["schemas"]["ItemsBlockDonation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_donation item by unique identifier.
   */
  readSingleItemsBlockDonation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonation"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_donation item.
   */
  deleteSingleItemsBlockDonation: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_donation item.
   */
  updateSingleItemsBlockDonation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonation"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_quiz items.
   */
  readItemsBlockQuiz: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuiz"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_quiz item.
   */
  createItemsBlockQuiz: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuiz"][] | components["schemas"]["ItemsBlockQuiz"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_quiz items.
   */
  deleteItemsBlockQuiz: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_quiz items at the same time.
   */
  updateItemsBlockQuiz: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuiz"][] | components["schemas"]["ItemsBlockQuiz"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_quiz item by unique identifier.
   */
  readSingleItemsBlockQuiz: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuiz"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_quiz item.
   */
  deleteSingleItemsBlockQuiz: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_quiz item.
   */
  updateSingleItemsBlockQuiz: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuiz"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuiz"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages items.
   */
  readItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages item.
   */
  createItemsPages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages items.
   */
  deleteItemsPages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages items at the same time.
   */
  updateItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages item by unique identifier.
   */
  readSingleItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages item.
   */
  deleteSingleItemsPages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages item.
   */
  updateSingleItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the charts items.
   */
  readItemsCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCharts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new charts item.
   */
  createItemsCharts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCharts"][] | components["schemas"]["ItemsCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing charts items.
   */
  deleteItemsCharts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple charts items at the same time.
   */
  updateItemsCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCharts"][] | components["schemas"]["ItemsCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single charts item by unique identifier.
   */
  readSingleItemsCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCharts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing charts item.
   */
  deleteSingleItemsCharts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing charts item.
   */
  updateSingleItemsCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCharts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the news items.
   */
  readItemsNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNews"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new news item.
   */
  createItemsNews: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNews"][] | components["schemas"]["ItemsNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing news items.
   */
  deleteItemsNews: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple news items at the same time.
   */
  updateItemsNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNews"][] | components["schemas"]["ItemsNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single news item by unique identifier.
   */
  readSingleItemsNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing news item.
   */
  deleteSingleItemsNews: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing news item.
   */
  updateSingleItemsNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the datasets items.
   */
  readItemsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDatasets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new datasets item.
   */
  createItemsDatasets: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDatasets"][] | components["schemas"]["ItemsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing datasets items.
   */
  deleteItemsDatasets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple datasets items at the same time.
   */
  updateItemsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDatasets"][] | components["schemas"]["ItemsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single datasets item by unique identifier.
   */
  readSingleItemsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDatasets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing datasets item.
   */
  deleteSingleItemsDatasets: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing datasets item.
   */
  updateSingleItemsDatasets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDatasets"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDatasets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the seo items.
   */
  readItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new seo item.
   */
  createItemsSEO: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"][] | components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing seo items.
   */
  deleteItemsSEO: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple seo items at the same time.
   */
  updateItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"][] | components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single seo item by unique identifier.
   */
  readSingleItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing seo item.
   */
  deleteSingleItemsSEO: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing seo item.
   */
  updateSingleItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the countries items.
   */
  readItemsCountries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCountries"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new countries item.
   */
  createItemsCountries: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCountries"][] | components["schemas"]["ItemsCountries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing countries items.
   */
  deleteItemsCountries: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple countries items at the same time.
   */
  updateItemsCountries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCountries"][] | components["schemas"]["ItemsCountries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single countries item by unique identifier.
   */
  readSingleItemsCountries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCountries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing countries item.
   */
  deleteSingleItemsCountries: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing countries item.
   */
  updateSingleItemsCountries: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCountries"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCountries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_chart items.
   */
  readItemsBlockChart: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChart"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_chart item.
   */
  createItemsBlockChart: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChart"][] | components["schemas"]["ItemsBlockChart"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_chart items.
   */
  deleteItemsBlockChart: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_chart items at the same time.
   */
  updateItemsBlockChart: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChart"][] | components["schemas"]["ItemsBlockChart"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_chart item by unique identifier.
   */
  readSingleItemsBlockChart: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChart"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_chart item.
   */
  deleteSingleItemsBlockChart: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_chart item.
   */
  updateSingleItemsBlockChart: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChart"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChart"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the at_geosphere_data items.
   */
  readItemsAtGeosphereData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereData"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new at_geosphere_data item.
   */
  createItemsAtGeosphereData: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereData"][] | components["schemas"]["ItemsAtGeosphereData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing at_geosphere_data items.
   */
  deleteItemsAtGeosphereData: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple at_geosphere_data items at the same time.
   */
  updateItemsAtGeosphereData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereData"][] | components["schemas"]["ItemsAtGeosphereData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single at_geosphere_data item by unique identifier.
   */
  readSingleItemsAtGeosphereData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereData"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing at_geosphere_data item.
   */
  deleteSingleItemsAtGeosphereData: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing at_geosphere_data item.
   */
  updateSingleItemsAtGeosphereData: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereData"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereData"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the at_geosphere_stations items.
   */
  readItemsAtGeosphereStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereStations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new at_geosphere_stations item.
   */
  createItemsAtGeosphereStations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereStations"][] | components["schemas"]["ItemsAtGeosphereStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing at_geosphere_stations items.
   */
  deleteItemsAtGeosphereStations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple at_geosphere_stations items at the same time.
   */
  updateItemsAtGeosphereStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereStations"][] | components["schemas"]["ItemsAtGeosphereStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single at_geosphere_stations item by unique identifier.
   */
  readSingleItemsAtGeosphereStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereStations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing at_geosphere_stations item.
   */
  deleteSingleItemsAtGeosphereStations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing at_geosphere_stations item.
   */
  updateSingleItemsAtGeosphereStations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsAtGeosphereStations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAtGeosphereStations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_translations items.
   */
  readItemsPagesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_translations item.
   */
  createItemsPagesTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslations"][] | components["schemas"]["ItemsPagesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_translations items.
   */
  deleteItemsPagesTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_translations items at the same time.
   */
  updateItemsPagesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslations"][] | components["schemas"]["ItemsPagesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_translations item by unique identifier.
   */
  readSingleItemsPagesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_translations item.
   */
  deleteSingleItemsPagesTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_translations item.
   */
  updateSingleItemsPagesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_richtext items.
   */
  readItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_richtext item.
   */
  createItemsBlockRichtext: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_richtext items.
   */
  deleteItemsBlockRichtext: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_richtext items at the same time.
   */
  updateItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_richtext item by unique identifier.
   */
  readSingleItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_richtext item.
   */
  deleteSingleItemsBlockRichtext: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_richtext item.
   */
  updateSingleItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_chart_charts items.
   */
  readItemsBlockChartCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChartCharts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_chart_charts item.
   */
  createItemsBlockChartCharts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChartCharts"][] | components["schemas"]["ItemsBlockChartCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_chart_charts items.
   */
  deleteItemsBlockChartCharts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_chart_charts items at the same time.
   */
  updateItemsBlockChartCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChartCharts"][] | components["schemas"]["ItemsBlockChartCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_chart_charts item by unique identifier.
   */
  readSingleItemsBlockChartCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChartCharts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_chart_charts item.
   */
  deleteSingleItemsBlockChartCharts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_chart_charts item.
   */
  updateSingleItemsBlockChartCharts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockChartCharts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockChartCharts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the languages items.
   */
  readItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new languages item.
   */
  createItemsLanguages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing languages items.
   */
  deleteItemsLanguages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple languages items at the same time.
   */
  updateItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single languages item by unique identifier.
   */
  readSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing languages item.
   */
  deleteSingleItemsLanguages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing languages item.
   */
  updateSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the de_wind_power_plants items.
   */
  readItemsDeWindPowerPlants: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeWindPowerPlants"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new de_wind_power_plants item.
   */
  createItemsDeWindPowerPlants: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeWindPowerPlants"][] | components["schemas"]["ItemsDeWindPowerPlants"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing de_wind_power_plants items.
   */
  deleteItemsDeWindPowerPlants: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple de_wind_power_plants items at the same time.
   */
  updateItemsDeWindPowerPlants: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeWindPowerPlants"][] | components["schemas"]["ItemsDeWindPowerPlants"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single de_wind_power_plants item by unique identifier.
   */
  readSingleItemsDeWindPowerPlants: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeWindPowerPlants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing de_wind_power_plants item.
   */
  deleteSingleItemsDeWindPowerPlants: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing de_wind_power_plants item.
   */
  updateSingleItemsDeWindPowerPlants: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsDeWindPowerPlants"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsDeWindPowerPlants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the units_solar items.
   */
  readItemsUnitsSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUnitsSolar"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new units_solar item.
   */
  createItemsUnitsSolar: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUnitsSolar"][] | components["schemas"]["ItemsUnitsSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing units_solar items.
   */
  deleteItemsUnitsSolar: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple units_solar items at the same time.
   */
  updateItemsUnitsSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUnitsSolar"][] | components["schemas"]["ItemsUnitsSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single units_solar item by unique identifier.
   */
  readSingleItemsUnitsSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUnitsSolar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing units_solar item.
   */
  deleteSingleItemsUnitsSolar: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing units_solar item.
   */
  updateSingleItemsUnitsSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsUnitsSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUnitsSolar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_quotes items.
   */
  readItemsBlockQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuotes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_quotes item.
   */
  createItemsBlockQuotes: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuotes"][] | components["schemas"]["ItemsBlockQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_quotes items.
   */
  deleteItemsBlockQuotes: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_quotes items at the same time.
   */
  updateItemsBlockQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuotes"][] | components["schemas"]["ItemsBlockQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_quotes item by unique identifier.
   */
  readSingleItemsBlockQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuotes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_quotes item.
   */
  deleteSingleItemsBlockQuotes: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_quotes item.
   */
  updateSingleItemsBlockQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuotes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the quotes items.
   */
  readItemsQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuotes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new quotes item.
   */
  createItemsQuotes: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuotes"][] | components["schemas"]["ItemsQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing quotes items.
   */
  deleteItemsQuotes: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple quotes items at the same time.
   */
  updateItemsQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuotes"][] | components["schemas"]["ItemsQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single quotes item by unique identifier.
   */
  readSingleItemsQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuotes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing quotes item.
   */
  deleteSingleItemsQuotes: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing quotes item.
   */
  updateSingleItemsQuotes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuotes"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuotes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the test_dataset items.
   */
  readItemsTestDataset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestDataset"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new test_dataset item.
   */
  createItemsTestDataset: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestDataset"][] | components["schemas"]["ItemsTestDataset"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing test_dataset items.
   */
  deleteItemsTestDataset: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple test_dataset items at the same time.
   */
  updateItemsTestDataset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestDataset"][] | components["schemas"]["ItemsTestDataset"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single test_dataset item by unique identifier.
   */
  readSingleItemsTestDataset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestDataset"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing test_dataset item.
   */
  deleteSingleItemsTestDataset: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing test_dataset item.
   */
  updateSingleItemsTestDataset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestDataset"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestDataset"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the regions items.
   */
  readItemsRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRegions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new regions item.
   */
  createItemsRegions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRegions"][] | components["schemas"]["ItemsRegions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing regions items.
   */
  deleteItemsRegions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple regions items at the same time.
   */
  updateItemsRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRegions"][] | components["schemas"]["ItemsRegions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single regions item by unique identifier.
   */
  readSingleItemsRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRegions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing regions item.
   */
  deleteSingleItemsRegions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing regions item.
   */
  updateSingleItemsRegions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRegions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRegions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the mastr_solar items.
   */
  readItemsMastrSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMastrSolar"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new mastr_solar item.
   */
  createItemsMastrSolar: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMastrSolar"][] | components["schemas"]["ItemsMastrSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing mastr_solar items.
   */
  deleteItemsMastrSolar: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple mastr_solar items at the same time.
   */
  updateItemsMastrSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMastrSolar"][] | components["schemas"]["ItemsMastrSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single mastr_solar item by unique identifier.
   */
  readSingleItemsMastrSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMastrSolar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing mastr_solar item.
   */
  deleteSingleItemsMastrSolar: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing mastr_solar item.
   */
  updateSingleItemsMastrSolar: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsMastrSolar"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsMastrSolar"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_translations_blocks items.
   */
  readItemsPagesTranslationsBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslationsBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_translations_blocks item.
   */
  createItemsPagesTranslationsBlocks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslationsBlocks"][] | components["schemas"]["ItemsPagesTranslationsBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_translations_blocks items.
   */
  deleteItemsPagesTranslationsBlocks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_translations_blocks items at the same time.
   */
  updateItemsPagesTranslationsBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslationsBlocks"][] | components["schemas"]["ItemsPagesTranslationsBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_translations_blocks item by unique identifier.
   */
  readSingleItemsPagesTranslationsBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslationsBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_translations_blocks item.
   */
  deleteSingleItemsPagesTranslationsBlocks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_translations_blocks item.
   */
  updateSingleItemsPagesTranslationsBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslationsBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslationsBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the renewable_share_daily items.
   */
  readItemsRenewableShareDaily: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShareDaily"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new renewable_share_daily item.
   */
  createItemsRenewableShareDaily: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShareDaily"][] | components["schemas"]["ItemsRenewableShareDaily"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing renewable_share_daily items.
   */
  deleteItemsRenewableShareDaily: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple renewable_share_daily items at the same time.
   */
  updateItemsRenewableShareDaily: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShareDaily"][] | components["schemas"]["ItemsRenewableShareDaily"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single renewable_share_daily item by unique identifier.
   */
  readSingleItemsRenewableShareDaily: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShareDaily"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing renewable_share_daily item.
   */
  deleteSingleItemsRenewableShareDaily: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing renewable_share_daily item.
   */
  updateSingleItemsRenewableShareDaily: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRenewableShareDaily"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRenewableShareDaily"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Extensions
   * @description List the installed extensions and their configuration in the project.
   */
  listExtensions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensions: {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensionBundle: {
    parameters: {
      path: {
        bundle: string;
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the carbon_prices items.
   */
  readItemsCarbonPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCarbonPrices"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new carbon_prices item.
   */
  createItemsCarbonPrices: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCarbonPrices"][] | components["schemas"]["ItemsCarbonPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing carbon_prices items.
   */
  deleteItemsCarbonPrices: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple carbon_prices items at the same time.
   */
  updateItemsCarbonPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCarbonPrices"][] | components["schemas"]["ItemsCarbonPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single carbon_prices item by unique identifier.
   */
  readSingleItemsCarbonPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCarbonPrices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing carbon_prices item.
   */
  deleteSingleItemsCarbonPrices: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing carbon_prices item.
   */
  updateSingleItemsCarbonPrices: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCarbonPrices"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCarbonPrices"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the global_co2_concentration items.
   */
  readItemsGlobalCo2Concentration: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalCo2Concentration"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new global_co2_concentration item.
   */
  createItemsGlobalCo2Concentration: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalCo2Concentration"][] | components["schemas"]["ItemsGlobalCo2Concentration"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing global_co2_concentration items.
   */
  deleteItemsGlobalCo2Concentration: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple global_co2_concentration items at the same time.
   */
  updateItemsGlobalCo2Concentration: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalCo2Concentration"][] | components["schemas"]["ItemsGlobalCo2Concentration"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single global_co2_concentration item by unique identifier.
   */
  readSingleItemsGlobalCo2Concentration: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalCo2Concentration"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing global_co2_concentration item.
   */
  deleteSingleItemsGlobalCo2Concentration: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing global_co2_concentration item.
   */
  updateSingleItemsGlobalCo2Concentration: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalCo2Concentration"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalCo2Concentration"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_items items.
   */
  readItemsBlockItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItems"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_items item.
   */
  createItemsBlockItems: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItems"][] | components["schemas"]["ItemsBlockItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_items items.
   */
  deleteItemsBlockItems: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_items items at the same time.
   */
  updateItemsBlockItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItems"][] | components["schemas"]["ItemsBlockItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_items item by unique identifier.
   */
  readSingleItemsBlockItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_items item.
   */
  deleteSingleItemsBlockItems: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_items item.
   */
  updateSingleItemsBlockItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_teaser items.
   */
  readItemsBlockTeaser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaser"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_teaser item.
   */
  createItemsBlockTeaser: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaser"][] | components["schemas"]["ItemsBlockTeaser"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_teaser items.
   */
  deleteItemsBlockTeaser: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_teaser items at the same time.
   */
  updateItemsBlockTeaser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaser"][] | components["schemas"]["ItemsBlockTeaser"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_teaser item by unique identifier.
   */
  readSingleItemsBlockTeaser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaser"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_teaser item.
   */
  deleteSingleItemsBlockTeaser: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_teaser item.
   */
  updateSingleItemsBlockTeaser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaser"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaser"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the companies_companies_sectors items.
   */
  readItemsCompaniesCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesCompaniesSectors"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new companies_companies_sectors item.
   */
  createItemsCompaniesCompaniesSectors: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesCompaniesSectors"][] | components["schemas"]["ItemsCompaniesCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing companies_companies_sectors items.
   */
  deleteItemsCompaniesCompaniesSectors: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple companies_companies_sectors items at the same time.
   */
  updateItemsCompaniesCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesCompaniesSectors"][] | components["schemas"]["ItemsCompaniesCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single companies_companies_sectors item by unique identifier.
   */
  readSingleItemsCompaniesCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesCompaniesSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing companies_companies_sectors item.
   */
  deleteSingleItemsCompaniesCompaniesSectors: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing companies_companies_sectors item.
   */
  updateSingleItemsCompaniesCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesCompaniesSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sites items.
   */
  readItemsSites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSites"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new sites item.
   */
  createItemsSites: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSites"][] | components["schemas"]["ItemsSites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing sites items.
   */
  deleteItemsSites: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple sites items at the same time.
   */
  updateItemsSites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSites"][] | components["schemas"]["ItemsSites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sites item by unique identifier.
   */
  readSingleItemsSites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSites"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing sites item.
   */
  deleteSingleItemsSites: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing sites item.
   */
  updateSingleItemsSites: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSites"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSites"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the companies_sectors items.
   */
  readItemsCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesSectors"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new companies_sectors item.
   */
  createItemsCompaniesSectors: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesSectors"][] | components["schemas"]["ItemsCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing companies_sectors items.
   */
  deleteItemsCompaniesSectors: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple companies_sectors items at the same time.
   */
  updateItemsCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesSectors"][] | components["schemas"]["ItemsCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single companies_sectors item by unique identifier.
   */
  readSingleItemsCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing companies_sectors item.
   */
  deleteSingleItemsCompaniesSectors: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing companies_sectors item.
   */
  updateSingleItemsCompaniesSectors: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesSectors"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesSectors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the charts_translations items.
   */
  readItemsChartsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChartsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new charts_translations item.
   */
  createItemsChartsTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChartsTranslations"][] | components["schemas"]["ItemsChartsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing charts_translations items.
   */
  deleteItemsChartsTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple charts_translations items at the same time.
   */
  updateItemsChartsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChartsTranslations"][] | components["schemas"]["ItemsChartsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single charts_translations item by unique identifier.
   */
  readSingleItemsChartsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChartsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing charts_translations item.
   */
  deleteSingleItemsChartsTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing charts_translations item.
   */
  updateSingleItemsChartsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsChartsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsChartsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the quiz_questions items.
   */
  readItemsQuizQuestions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizQuestions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new quiz_questions item.
   */
  createItemsQuizQuestions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizQuestions"][] | components["schemas"]["ItemsQuizQuestions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing quiz_questions items.
   */
  deleteItemsQuizQuestions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple quiz_questions items at the same time.
   */
  updateItemsQuizQuestions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizQuestions"][] | components["schemas"]["ItemsQuizQuestions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single quiz_questions item by unique identifier.
   */
  readSingleItemsQuizQuestions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizQuestions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing quiz_questions item.
   */
  deleteSingleItemsQuizQuestions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing quiz_questions item.
   */
  updateSingleItemsQuizQuestions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizQuestions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizQuestions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the companies items.
   */
  readItemsCompanies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompanies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new companies item.
   */
  createItemsCompanies: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompanies"][] | components["schemas"]["ItemsCompanies"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing companies items.
   */
  deleteItemsCompanies: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple companies items at the same time.
   */
  updateItemsCompanies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompanies"][] | components["schemas"]["ItemsCompanies"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single companies item by unique identifier.
   */
  readSingleItemsCompanies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompanies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing companies item.
   */
  deleteSingleItemsCompanies: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing companies item.
   */
  updateSingleItemsCompanies: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompanies"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompanies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_gallery items.
   */
  readItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_gallery item.
   */
  createItemsBlockGallery: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_gallery items.
   */
  deleteItemsBlockGallery: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_gallery items at the same time.
   */
  updateItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_gallery item by unique identifier.
   */
  readSingleItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_gallery item.
   */
  deleteSingleItemsBlockGallery: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_gallery item.
   */
  updateSingleItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the quiz_answers items.
   */
  readItemsQuizAnswers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizAnswers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new quiz_answers item.
   */
  createItemsQuizAnswers: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizAnswers"][] | components["schemas"]["ItemsQuizAnswers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing quiz_answers items.
   */
  deleteItemsQuizAnswers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple quiz_answers items at the same time.
   */
  updateItemsQuizAnswers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizAnswers"][] | components["schemas"]["ItemsQuizAnswers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single quiz_answers item by unique identifier.
   */
  readSingleItemsQuizAnswers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizAnswers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing quiz_answers item.
   */
  deleteSingleItemsQuizAnswers: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing quiz_answers item.
   */
  updateSingleItemsQuizAnswers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsQuizAnswers"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQuizAnswers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the glossary_translations items.
   */
  readItemsGlossaryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossaryTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new glossary_translations item.
   */
  createItemsGlossaryTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossaryTranslations"][] | components["schemas"]["ItemsGlossaryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing glossary_translations items.
   */
  deleteItemsGlossaryTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple glossary_translations items at the same time.
   */
  updateItemsGlossaryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossaryTranslations"][] | components["schemas"]["ItemsGlossaryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single glossary_translations item by unique identifier.
   */
  readSingleItemsGlossaryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossaryTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing glossary_translations item.
   */
  deleteSingleItemsGlossaryTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing glossary_translations item.
   */
  updateSingleItemsGlossaryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossaryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossaryTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_grid items.
   */
  readItemsBlockGrid: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGrid"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_grid item.
   */
  createItemsBlockGrid: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGrid"][] | components["schemas"]["ItemsBlockGrid"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_grid items.
   */
  deleteItemsBlockGrid: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_grid items at the same time.
   */
  updateItemsBlockGrid: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGrid"][] | components["schemas"]["ItemsBlockGrid"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_grid item by unique identifier.
   */
  readSingleItemsBlockGrid: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGrid"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_grid item.
   */
  deleteSingleItemsBlockGrid: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_grid item.
   */
  updateSingleItemsBlockGrid: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGrid"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGrid"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the emissions items.
   */
  readItemsEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEmissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new emissions item.
   */
  createItemsEmissions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEmissions"][] | components["schemas"]["ItemsEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing emissions items.
   */
  deleteItemsEmissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple emissions items at the same time.
   */
  updateItemsEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEmissions"][] | components["schemas"]["ItemsEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single emissions item by unique identifier.
   */
  readSingleItemsEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing emissions item.
   */
  deleteSingleItemsEmissions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing emissions item.
   */
  updateSingleItemsEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_gallery_files items.
   */
  readItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_gallery_files item.
   */
  createItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"][] | components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_gallery_files items.
   */
  deleteItemsBlockGalleryFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_gallery_files items at the same time.
   */
  updateItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"][] | components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_gallery_files item by unique identifier.
   */
  readSingleItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_gallery_files item.
   */
  deleteSingleItemsBlockGalleryFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_gallery_files item.
   */
  updateSingleItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the energy items.
   */
  readItemsEnergy: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergy"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new energy item.
   */
  createItemsEnergy: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergy"][] | components["schemas"]["ItemsEnergy"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing energy items.
   */
  deleteItemsEnergy: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple energy items at the same time.
   */
  updateItemsEnergy: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergy"][] | components["schemas"]["ItemsEnergy"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single energy item by unique identifier.
   */
  readSingleItemsEnergy: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergy"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing energy item.
   */
  deleteSingleItemsEnergy: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing energy item.
   */
  updateSingleItemsEnergy: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergy"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergy"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the glossary items.
   */
  readItemsGlossary: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossary"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new glossary item.
   */
  createItemsGlossary: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossary"][] | components["schemas"]["ItemsGlossary"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing glossary items.
   */
  deleteItemsGlossary: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple glossary items at the same time.
   */
  updateItemsGlossary: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossary"][] | components["schemas"]["ItemsGlossary"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single glossary item by unique identifier.
   */
  readSingleItemsGlossary: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossary"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing glossary item.
   */
  deleteSingleItemsGlossary: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing glossary item.
   */
  updateSingleItemsGlossary: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlossary"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlossary"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the companies_emissions items.
   */
  readItemsCompaniesEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesEmissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new companies_emissions item.
   */
  createItemsCompaniesEmissions: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesEmissions"][] | components["schemas"]["ItemsCompaniesEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing companies_emissions items.
   */
  deleteItemsCompaniesEmissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple companies_emissions items at the same time.
   */
  updateItemsCompaniesEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesEmissions"][] | components["schemas"]["ItemsCompaniesEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single companies_emissions item by unique identifier.
   */
  readSingleItemsCompaniesEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesEmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing companies_emissions item.
   */
  deleteSingleItemsCompaniesEmissions: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing companies_emissions item.
   */
  updateSingleItemsCompaniesEmissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCompaniesEmissions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCompaniesEmissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the energy_renewable_share items.
   */
  readItemsEnergyRenewableShare: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergyRenewableShare"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new energy_renewable_share item.
   */
  createItemsEnergyRenewableShare: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergyRenewableShare"][] | components["schemas"]["ItemsEnergyRenewableShare"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing energy_renewable_share items.
   */
  deleteItemsEnergyRenewableShare: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple energy_renewable_share items at the same time.
   */
  updateItemsEnergyRenewableShare: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergyRenewableShare"][] | components["schemas"]["ItemsEnergyRenewableShare"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single energy_renewable_share item by unique identifier.
   */
  readSingleItemsEnergyRenewableShare: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergyRenewableShare"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing energy_renewable_share item.
   */
  deleteSingleItemsEnergyRenewableShare: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing energy_renewable_share item.
   */
  updateSingleItemsEnergyRenewableShare: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsEnergyRenewableShare"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEnergyRenewableShare"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_panel items.
   */
  readItemsBlockPanel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanel"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_panel item.
   */
  createItemsBlockPanel: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanel"][] | components["schemas"]["ItemsBlockPanel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_panel items.
   */
  deleteItemsBlockPanel: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_panel items at the same time.
   */
  updateItemsBlockPanel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanel"][] | components["schemas"]["ItemsBlockPanel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_panel item by unique identifier.
   */
  readSingleItemsBlockPanel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanel"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_panel item.
   */
  deleteSingleItemsBlockPanel: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_panel item.
   */
  updateSingleItemsBlockPanel: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanel"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanel"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_news items.
   */
  readItemsBlockNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockNews"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_news item.
   */
  createItemsBlockNews: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockNews"][] | components["schemas"]["ItemsBlockNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_news items.
   */
  deleteItemsBlockNews: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_news items at the same time.
   */
  updateItemsBlockNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockNews"][] | components["schemas"]["ItemsBlockNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_news item by unique identifier.
   */
  readSingleItemsBlockNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockNews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_news item.
   */
  deleteSingleItemsBlockNews: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_news item.
   */
  updateSingleItemsBlockNews: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockNews"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockNews"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_grid_blocks items.
   */
  readItemsBlockGridBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGridBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_grid_blocks item.
   */
  createItemsBlockGridBlocks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGridBlocks"][] | components["schemas"]["ItemsBlockGridBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_grid_blocks items.
   */
  deleteItemsBlockGridBlocks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_grid_blocks items at the same time.
   */
  updateItemsBlockGridBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGridBlocks"][] | components["schemas"]["ItemsBlockGridBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_grid_blocks item by unique identifier.
   */
  readSingleItemsBlockGridBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGridBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_grid_blocks item.
   */
  deleteSingleItemsBlockGridBlocks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_grid_blocks item.
   */
  updateSingleItemsBlockGridBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGridBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGridBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the sites_translations items.
   */
  readItemsSitesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSitesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new sites_translations item.
   */
  createItemsSitesTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSitesTranslations"][] | components["schemas"]["ItemsSitesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing sites_translations items.
   */
  deleteItemsSitesTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple sites_translations items at the same time.
   */
  updateItemsSitesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSitesTranslations"][] | components["schemas"]["ItemsSitesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single sites_translations item by unique identifier.
   */
  readSingleItemsSitesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSitesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing sites_translations item.
   */
  deleteSingleItemsSitesTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing sites_translations item.
   */
  updateSingleItemsSitesTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSitesTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSitesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the news_translations items.
   */
  readItemsNewsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNewsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new news_translations item.
   */
  createItemsNewsTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNewsTranslations"][] | components["schemas"]["ItemsNewsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing news_translations items.
   */
  deleteItemsNewsTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple news_translations items at the same time.
   */
  updateItemsNewsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNewsTranslations"][] | components["schemas"]["ItemsNewsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single news_translations item by unique identifier.
   */
  readSingleItemsNewsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNewsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing news_translations item.
   */
  deleteSingleItemsNewsTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing news_translations item.
   */
  updateSingleItemsNewsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNewsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNewsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_blocks items.
   */
  readItemsPagesBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_blocks item.
   */
  createItemsPagesBlocks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlocks"][] | components["schemas"]["ItemsPagesBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_blocks items.
   */
  deleteItemsPagesBlocks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_blocks items at the same time.
   */
  updateItemsPagesBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlocks"][] | components["schemas"]["ItemsPagesBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_blocks item by unique identifier.
   */
  readSingleItemsPagesBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_blocks item.
   */
  deleteSingleItemsPagesBlocks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_blocks item.
   */
  updateSingleItemsPagesBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_teaser_translations items.
   */
  readItemsBlockTeaserTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaserTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_teaser_translations item.
   */
  createItemsBlockTeaserTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaserTranslations"][] | components["schemas"]["ItemsBlockTeaserTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_teaser_translations items.
   */
  deleteItemsBlockTeaserTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_teaser_translations items at the same time.
   */
  updateItemsBlockTeaserTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaserTranslations"][] | components["schemas"]["ItemsBlockTeaserTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_teaser_translations item by unique identifier.
   */
  readSingleItemsBlockTeaserTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaserTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_teaser_translations item.
   */
  deleteSingleItemsBlockTeaserTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_teaser_translations item.
   */
  updateSingleItemsBlockTeaserTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeaserTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeaserTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_richtext_translations items.
   */
  readItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_richtext_translations item.
   */
  createItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"][] | components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_richtext_translations items.
   */
  deleteItemsBlockRichtextTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_richtext_translations items at the same time.
   */
  updateItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"][] | components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_richtext_translations item by unique identifier.
   */
  readSingleItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_richtext_translations item.
   */
  deleteSingleItemsBlockRichtextTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_richtext_translations item.
   */
  updateSingleItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_toggle_translations items.
   */
  readItemsBlockToggleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggleTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_toggle_translations item.
   */
  createItemsBlockToggleTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggleTranslations"][] | components["schemas"]["ItemsBlockToggleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_toggle_translations items.
   */
  deleteItemsBlockToggleTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_toggle_translations items at the same time.
   */
  updateItemsBlockToggleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggleTranslations"][] | components["schemas"]["ItemsBlockToggleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_toggle_translations item by unique identifier.
   */
  readSingleItemsBlockToggleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_toggle_translations item.
   */
  deleteSingleItemsBlockToggleTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_toggle_translations item.
   */
  updateSingleItemsBlockToggleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockToggleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockToggleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_panel_translations items.
   */
  readItemsBlockPanelTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanelTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_panel_translations item.
   */
  createItemsBlockPanelTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanelTranslations"][] | components["schemas"]["ItemsBlockPanelTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_panel_translations items.
   */
  deleteItemsBlockPanelTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_panel_translations items at the same time.
   */
  updateItemsBlockPanelTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanelTranslations"][] | components["schemas"]["ItemsBlockPanelTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_panel_translations item by unique identifier.
   */
  readSingleItemsBlockPanelTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanelTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_panel_translations item.
   */
  deleteSingleItemsBlockPanelTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_panel_translations item.
   */
  updateSingleItemsBlockPanelTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPanelTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPanelTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_donation_translations items.
   */
  readItemsBlockDonationTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonationTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_donation_translations item.
   */
  createItemsBlockDonationTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonationTranslations"][] | components["schemas"]["ItemsBlockDonationTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_donation_translations items.
   */
  deleteItemsBlockDonationTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_donation_translations items at the same time.
   */
  updateItemsBlockDonationTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonationTranslations"][] | components["schemas"]["ItemsBlockDonationTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_donation_translations item by unique identifier.
   */
  readSingleItemsBlockDonationTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonationTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_donation_translations item.
   */
  deleteSingleItemsBlockDonationTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_donation_translations item.
   */
  updateSingleItemsBlockDonationTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDonationTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDonationTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_items_translations items.
   */
  readItemsBlockItemsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItemsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_items_translations item.
   */
  createItemsBlockItemsTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItemsTranslations"][] | components["schemas"]["ItemsBlockItemsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_items_translations items.
   */
  deleteItemsBlockItemsTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_items_translations items at the same time.
   */
  updateItemsBlockItemsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItemsTranslations"][] | components["schemas"]["ItemsBlockItemsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_items_translations item by unique identifier.
   */
  readSingleItemsBlockItemsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItemsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_items_translations item.
   */
  deleteSingleItemsBlockItemsTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_items_translations item.
   */
  updateSingleItemsBlockItemsTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockItemsTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockItemsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}


export type Schema = {
  de_dwd_data: components["schemas"]["ItemsDeDwdData"][];
  de_dwd_stations: components["schemas"]["ItemsDeDwdStations"][];
  renewable_share_15min: components["schemas"]["ItemsRenewableShare15min"][];
  block_toggle: components["schemas"]["ItemsBlockToggle"][];
  block_donation: components["schemas"]["ItemsBlockDonation"][];
  block_quiz: components["schemas"]["ItemsBlockQuiz"][];
  pages: components["schemas"]["ItemsPages"][];
  charts: components["schemas"]["ItemsCharts"][];
  news: components["schemas"]["ItemsNews"][];
  datasets: components["schemas"]["ItemsDatasets"][];
  seo: components["schemas"]["ItemsSEO"][];
  countries: components["schemas"]["ItemsCountries"][];
  block_chart: components["schemas"]["ItemsBlockChart"][];
  at_geosphere_data: components["schemas"]["ItemsAtGeosphereData"][];
  at_geosphere_stations: components["schemas"]["ItemsAtGeosphereStations"][];
  pages_translations: components["schemas"]["ItemsPagesTranslations"][];
  block_richtext: components["schemas"]["ItemsBlockRichtext"][];
  block_chart_charts: components["schemas"]["ItemsBlockChartCharts"][];
  languages: components["schemas"]["ItemsLanguages"][];
  de_wind_power_plants: components["schemas"]["ItemsDeWindPowerPlants"][];
  units_solar: components["schemas"]["ItemsUnitsSolar"][];
  block_quotes: components["schemas"]["ItemsBlockQuotes"][];
  quotes: components["schemas"]["ItemsQuotes"][];
  test_dataset: components["schemas"]["ItemsTestDataset"][];
  regions: components["schemas"]["ItemsRegions"][];
  mastr_solar: components["schemas"]["ItemsMastrSolar"][];
  pages_translations_blocks: components["schemas"]["ItemsPagesTranslationsBlocks"][];
  renewable_share_daily: components["schemas"]["ItemsRenewableShareDaily"][];
  carbon_prices: components["schemas"]["ItemsCarbonPrices"][];
  global_co2_concentration: components["schemas"]["ItemsGlobalCo2Concentration"][];
  block_items: components["schemas"]["ItemsBlockItems"][];
  block_teaser: components["schemas"]["ItemsBlockTeaser"][];
  companies_companies_sectors: components["schemas"]["ItemsCompaniesCompaniesSectors"][];
  sites: components["schemas"]["ItemsSites"][];
  companies_sectors: components["schemas"]["ItemsCompaniesSectors"][];
  charts_translations: components["schemas"]["ItemsChartsTranslations"][];
  quiz_questions: components["schemas"]["ItemsQuizQuestions"][];
  companies: components["schemas"]["ItemsCompanies"][];
  block_gallery: components["schemas"]["ItemsBlockGallery"][];
  quiz_answers: components["schemas"]["ItemsQuizAnswers"][];
  glossary_translations: components["schemas"]["ItemsGlossaryTranslations"][];
  block_grid: components["schemas"]["ItemsBlockGrid"][];
  emissions: components["schemas"]["ItemsEmissions"][];
  block_gallery_files: components["schemas"]["ItemsBlockGalleryFiles"][];
  energy: components["schemas"]["ItemsEnergy"][];
  glossary: components["schemas"]["ItemsGlossary"][];
  companies_emissions: components["schemas"]["ItemsCompaniesEmissions"][];
  energy_renewable_share: components["schemas"]["ItemsEnergyRenewableShare"][];
  block_panel: components["schemas"]["ItemsBlockPanel"][];
  block_news: components["schemas"]["ItemsBlockNews"][];
  block_grid_blocks: components["schemas"]["ItemsBlockGridBlocks"][];
  sites_translations: components["schemas"]["ItemsSitesTranslations"][];
  news_translations: components["schemas"]["ItemsNewsTranslations"][];
  pages_blocks: components["schemas"]["ItemsPagesBlocks"][];
  block_teaser_translations: components["schemas"]["ItemsBlockTeaserTranslations"][];
  block_richtext_translations: components["schemas"]["ItemsBlockRichtextTranslations"][];
  block_toggle_translations: components["schemas"]["ItemsBlockToggleTranslations"][];
  block_panel_translations: components["schemas"]["ItemsBlockPanelTranslations"][];
  block_donation_translations: components["schemas"]["ItemsBlockDonationTranslations"][];
  block_items_translations: components["schemas"]["ItemsBlockItemsTranslations"][];
};
